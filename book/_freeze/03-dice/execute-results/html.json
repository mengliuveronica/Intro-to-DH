{
  "hash": "65ea313cc5c94b256af8ec685b483b5d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rolling the Dice: R Basics üé≤\"\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-tools: true\n    code-link: true\n    highlight-style: github\n    include-in-header:\n      text: |\n        <script src=\"quiz.js\"></script>\nexecute:\n  freeze: auto\n---\n\n\n\n\nWelcome to your first hands-on project with R! We'll create a virtual pair of dice to learn fundamental R concepts. Just as historians analyze artifacts or literary scholars examine texts, we'll be examining the building blocks of data analysis.\n\n::: {.callout-tip}\n## Learning Objectives\n- üñ•Ô∏è Understand the RStudio interface - your new digital workspace\n- üß± Create and manipulate R objects - the foundation of data in R\n- üõ†Ô∏è Write and use R functions - automate tasks and reuse code scripts\n- üìò Introduction to Quarto documents - blend code and narrative seamlessly\n:::\n\n# RStudio User Interface\n\n## Understanding the RStudio Interface üñ•Ô∏è\n\nWhen you open RStudio, you'll see four main panes:\n\n1. **Console** (usually bottom-left): This is where you type R commands and see results. Think of it as a conversation with R - you ask questions, and R answers.\n\n2. **Source** (usually top-left): Here you write and edit R scripts. It's like a digital notebook for your code.\n\n3. **Environment** (usually top-right): This shows data and objects in R's memory. Imagine it as a shelf where R stores all the information you've given it.\n\n4. **Files/Plots/Packages/Help** (usually bottom-right): This multi-purpose pane is like a Swiss Army knife, offering file management, visualizations, add-ons, and documentation.\n\n## Running R Code üèÉ‚Äç‚ôÇÔ∏è\n\nThere are several ways to execute R code in RStudio:\n\n1. **Using the Console:**\n   - Type code directly into the Console and press Enter.\n\n2. **Using the Source Editor:**\n   - Write code in the Source Editor.\n   - Run a single line: Place cursor on the line and press Ctrl+Enter (Cmd+Enter on Mac).\n   - Run multiple lines: Highlight lines and press Ctrl+Enter (Cmd+Enter on Mac).\n   - Run entire script: Click \"Run\" button or press Ctrl+Shift+Enter (Cmd+Shift+Enter on Mac).\n\n::: {.callout-tip}\n## Pro Tip\nWriting code in the Source Editor allows you to save, edit, and rerun your entire analysis easily.\n:::\n\n\n## Learning Check üèÅ\n\n<div id=\"quiz1\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What are the four main panes in RStudio?\",\n      options: [\n        \"Editor, Terminal, Viewer, Packages\",\n        \"Console, Source, Environment, Files/Plots/Packages/Help\",\n        \"Code, Output, Data, Plots\",\n        \"Script, Console, Workspace, Help\"\n      ]\n    },\n    {\n      text: \"Where would you typically write and save your R scripts?\",\n      options: [\n        \"Console\",\n        \"Source Editor\",\n        \"Environment\",\n        \"Files pane\"\n      ]\n    },\n    {\n      text: \"How can you run a single line of code from the Source Editor?\",\n      options: [\n        \"Click the \\\"Run\\\" button\",\n        \"Press Ctrl+Shift+Enter (Cmd+Shift+Enter on Mac)\",\n        \"Place cursor on the line and press Ctrl+Enter (Cmd+Enter on Mac)\",\n        \"Double-click the line\"\n      ]\n    }\n  ],\n  answers: [1, 1, 2]\n}, \"quiz1\");\n</script>\n\n\n::: {.callout-tip}\n## Practice Exercise\nOpen RStudio and try the following:\n1. Create a new R script and save it as \"my_first_script.R\"\n2. In the script, write a simple calculation (e.g., 5 * 7)\n3. Run this calculation using different methods (console, running a single line, running the entire script)\n4. Observe where the result appears in the RStudio interface\n:::\n\n# Objects in R üì¶\n\nIn R, we store data in things called *objects*. You can think of an object as a container with a label üì¶. The label is the name we give to the object, and inside the container is our data.\n\nFor example, we can create an object called `my_age` and store a number in it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_age <- 22\n```\n:::\n\n\n\nThis is similar to how you might label a box \"Books\" before putting books inside it. Now, whenever R sees `my_age`, it knows to use the value 22.\n\n::: {.callout-tip}\n## Naming Objects\nWhen naming objects in R:\n- Names can't start with a number\n- Avoid special symbols like ^, !, $, @, +, -, /, or *\n- R is case-sensitive, so `Name` and `name` are different objects\n- Avoid using names of existing functions or objects\n:::\n\n\n## Creating a Die as an Object üé≤\n\nLet's start by creating a single die:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- 1:6\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note}\n## Key Concepts\n- **Objects**: Containers for storing data in R.\n- **Assignment Operator** (`<-`): Used to assign values to objects.\n- **Vector**: A basic container that can hold multiple items of the same type.\n:::\n\n::: {.callout-tip}\n## The Colon Operator\nThe colon operator (`:`) returns every integer between two integers. It's an easy way to create a sequence of numbers.\n:::\n\n## Manipulating Objects\n\nYou can perform various operations on your `die` object:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\ndie * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10 12\n```\n\n\n:::\n\n```{.r .cell-code}\ndie / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5 1.0 1.5 2.0 2.5 3.0\n```\n\n\n:::\n:::\n\n\n\n\n## Learning Check\n\n<div id=\"quiz2\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What is an object in R?\",\n      options: [\n        \"A function that performs calculations\",\n        \"A container for storing data\",\n        \"A type of plot or graph\",\n        \"A programming language\"\n      ]\n    },\n    {\n      text: \"How do you create an object in R?\",\n      options: [\n        \"Using the create() function\",\n        \"Using the assignment operator (<-)\",\n        \"Using the new() function\",\n        \"Using the object() function\"\n      ]\n    },\n    {\n      text: \"Which of the following is NOT a rule for naming objects in R?\",\n      options: [\n        \"Names can't start with a number\",\n        \"Avoid special symbols like ^, !, $, @, +, -, /, or *\",\n        \"R is case-sensitive\",\n        \"Names must be in all uppercase letters\"\n      ]\n    }\n  ],\n  answers: [1, 1, 3]\n}, \"quiz2\");\n</script>\n\n\n\n::: {.callout-tip}\n## Practice Exercise\nCreate the following objects in R:\n1. An object named `favorite_number` with your favorite number\n2. An object named `lucky_numbers` with a sequence of your three lucky numbers\n3. Try to create an object with an invalid name (e.g., starting with a number) and observe the error\n:::\n\n# Functions in R üõ†Ô∏è\n\nIn R programming, functions are like specialized tools that help you perform specific tasks. Just as you might use a hammer to drive a nail or a screwdriver to tighten a screw, you use functions in R to perform particular operations on your data.\n\n## Using Built-in Functions\n\nR comes with many built-in functions that you can use right away. These are like the basic tools that come in a starter toolkit. Let's look at a few examples:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The round() function rounds numbers\nround(3.14159)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# The sum() function adds numbers together\nsum(1, 2, 3, 4, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n```{.r .cell-code}\n# The length() function tells you how many items are in a list or vector\nlength(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n\nUsing a function is straightforward. You write the name of the function followed by parentheses. Inside the parentheses, you put the information (called \"arguments\") that the function needs to do its job.\n\n::: {.callout-note}\n## Comments in R\nDid you notice the `#` ... part in the above code chunk?\n\nIn R, the `#` symbol is used to create comments. Anything after a `#` on a line is ignored by R when running the code. Comments are useful for:\n\n1. Explaining what your code does\n2. Temporarily disabling code without deleting it\n3. Organizing your script into sections\n\n:::\n\n### Simulating Randomness: `sample()`\n\nTo simulate rolling a die, we need a function that can randomly select a number. The `sample()` function is perfect for this task. It's like reaching into a bag and pulling out a random item.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Roll the die once\nsample(x = die, size = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Roll the die again\nsample(x = die, size = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\nIn this case, `x = die` tells the function what to choose from (our die object), and `size = 1` says to pick one number.\n\n::: {.callout-note}\n## Sampling With Replacement\nBy default, `sample()` doesn't put the number back in the \"bag\" after selecting it. For dice rolling, we want to allow the same number to be selected multiple times. Use `replace = TRUE` in the `sample()` function to achieve this.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Roll two dice\nsample(die, size = 2, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 2\n```\n\n\n:::\n:::\n\n\n\n## Writing Your Own Functions\n\nLet's create a function to roll two dice:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll <- function() {\n  dice <- sample(die, size = 2, replace = TRUE)\n  sum(dice)\n}\n```\n:::\n\n\n\nLet's break this down:\n\n1. `roll <- function() { ... }` creates a new function named `roll`.\n2. Inside the curly braces `{ }` is the \"body\" of the function - the instructions for what it should do.\n3. `dice <- sample(die, size = 2, replace = TRUE)` rolls two dice.\n4. `sum(dice)` adds up the numbers rolled.\n\nNow, whenever you want to roll two dice and get the sum, you can simply use:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nroll()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip}\n## Practice Exercise\nTry modifying the `roll()` function to simulate rolling three dice instead of two. How would you change the function to return the average of the dice rolls instead of the sum?\n:::\n\n# Introduction to Quarto üìò\n\nQuarto is a powerful tool that allows you to combine R code, its output, and explanatory text in one document.\n\n## Why Use Quarto?\n\n1. **Reproducibility**: Quarto documents contain both code and narrative.\n2. **Presentation**: Create polished, professional-looking documents.\n3. **Flexibility**: Output to various formats like HTML, PDF, or slideshows.\n\n::: {.callout-tip}\n### The Importance of Reproducibility\nIn the humanities, as in all academic fields, being able to reproduce results is crucial. When you write your R code in scripts, you're creating a record of every step in your analysis. This is like creating detailed footnotes or citations in a research paper - it allows others (or future you!) to follow your work exactly.\n\nUsing scripts also makes it easy to make changes and rerun your entire analysis, which is much more efficient than trying to remember and retype everything in the console.\n:::\n\n\n\n## Converting Your R Script to a Quarto Document\n\n1. In RStudio, go to File > New File > Quarto Document.\n2. Give your document a title, like \"Dice Rolling Simulation\".\n3. Replace the default content with your own text and code.\n4. Use code chunks for your R code:\n\n   ```{{r}}\n   # Your R code here\n   ```\n\n5. Add explanatory text before and after your code chunks.\n\n::: {.callout-tip}\n## Practice Exercise\nTry converting your entire dice rolling script into a Quarto document. Add explanations for each step of the process. How does this change your understanding of the code?\n:::\n\n# Conclusion\n\nIn this chapter, we've covered the basics of R programming by creating a virtual dice rolling simulation. We've learned about the RStudio interface, R objects, functions, and introduced Quarto for creating reproducible documents. These foundational skills will serve as building blocks as we dive deeper into data analysis and visualization in R.\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}