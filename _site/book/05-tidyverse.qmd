---
title: "§5 Spinning the Reels 🎰"
subtitle: "Introduction to Tidyverse"
format:
  html:
    toc: true
    code-fold: false
    code-link: true
    highlight-style: github
    include-in-header:
      text: |
        <script src="quiz.js"></script>
        <script src="content-switch.js"></script>
filters: 
 - collapse-callout.lua
execute:
  freeze: auto
---

Welcome to the exciting world of tidyverse! In this chapter, we'll build on our knowledge of R by exploring the tidyverse, a collection of R packages designed for data science. We'll create a virtual slot machine to demonstrate the power and simplicity of tidyverse functions.

::: {.callout-tip}
## Learning Objectives
- 📦 Understand the basics of tidyverse and its core packages
- 🔄 Learn to manipulate data with dplyr functions
- 📊 Visualize data using ggplot2
- 🎰 Build a virtual slot machine using tidyverse functions
:::

# Introduction to Tidyverse 📦

Tidyverse is a collection of R packages that work together harmoniously for data manipulation, exploration, and visualization. Let's start by loading the tidyverse:

```{r}
# install.packages('tidyverse')
library(tidyverse)
```


The core tidyverse includes packages like dplyr (for data manipulation) and ggplot2 (for data visualization).

## Learning Check 🏁 

<div id="quiz1"></div>

<script>
createQuiz({
  questions: [
    {
      text: "What is tidyverse?",
      options: [
        "A single R package",
        "A collection of R packages for data science",
        "A programming language",
        "A type of data structure"
      ]
    },
    {
      text: "Which of the following is NOT a core tidyverse package?",
      options: [
        "dplyr",
        "ggplot2",
        "tidyr",
        "base"
      ]
    }
  ],
  answers: [1, 3]
}, "quiz1");
</script>

# Data Manipulation with dplyr 🔄

Let's revisit our deck of cards from the previous chapter, but this time using dplyr functions:


```{r}
# Create the deck
deck <- tibble(
    suit = rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13),
    rank = rep(c("Ace", 2:10, "Jack", "Queen", "King"), times = 4),
    value = rep(1:13, times = 4)
)
# View the first few cards
deck %>% head()
# Find all face cards
face_cards <- deck %>%
    filter(rank %in% c("Jack", "Queen", "King"))
# Calculate average value
avg_value <- deck %>%
    summarise(mean_value = mean(value))
# Add color column
deck <- deck %>%
    mutate(color = if_else(suit %in% c("Hearts", "Diamonds"), "Red", "Black"))
```


## Hands-On Coding 💻

Try the following:

1. Use `filter()` to find all the Aces in the deck.
2. Use `arrange()` to sort the deck by suit, then by value.
3. Use `group_by()` and `summarise()` to find the average value for each suit.

<div id="hidden-content1" style="display: none;">

```{r}
# Find all Aces
aces <- deck %>%
    filter(rank == "Ace")
# Sort deck
sorted_deck <- deck %>%
    arrange(suit, value)
# Average value by suit
avg_by_suit <- deck %>%
    group_by(suit) %>%
    summarise(avg_value = mean(value))
```


</div>

<script>
createToggleSection('button1', 'hidden-content1');
</script>

# Data Visualization with ggplot2 📊

Now, let's visualize our deck using ggplot2:

```{r}
ggplot(deck, aes(x = suit, fill = color)) +
    geom_bar() +
    labs(title = "Distribution of Cards by Suit",
    x = "Suit",
    y = "Count")+
    theme_minimal()
```


## Learning Check 🏁

<div id="quiz2"></div>

<script>
createQuiz({
  questions: [
    {
      text: "Which function is used to create a new variable in dplyr?",
      options: [
        "filter()",
        "mutate()",
        "summarise()",
        "arrange()"
      ]
    },
    {
      text: "What does the %>% operator do in tidyverse?",
      options: [
        "Multiplies values",
        "Pipes the output of one function to the input of another",
        "Creates a new data frame",
        "Filters data"
      ]
    }
  ],
  answers: [1, 1]
}, "quiz2");
</script>

# Building a Simple Slot Machine 🎰

Let's use our tidyverse skills to create a simple virtual slot machine!

```{r}
library(tidyverse)
# Define slot machine symbols
symbols <- c("🍒", "🍋", "🍊", "🍇", "🔔", "💎")
# Function to play the slot machine
play_slot_machine <- function(n_plays = 10) {
    tibble(
        play = 1:n_plays,
        symbol1 = sample(symbols, n_plays, replace = TRUE),
        symbol2 = sample(symbols, n_plays, replace = TRUE),
        symbol3 = sample(symbols, n_plays, replace = TRUE)
    ) %>%
    mutate(
        win = symbol1 == symbol2 & symbol2 == symbol3,
        result = if_else(win, "💰", "😢")
    )
}
# Simulate 20 plays
results <- play_slot_machine(20)
# Display results
print(results)
# Summarize wins
summary <- results %>%
    summarise(
    total_plays = n(),
    wins = sum(win),
    win_percentage = mean(win)*100
    )
print(summary)
#Visualize results
ggplot(results, aes(x = result, fill = result)) +
    geom_bar() +
    labs(title = "Slot Machine Results", x = "Outcome", y = "Count") +
    theme_minimal() +
    scale_fill_manual(
        values = c("💰" = "green", "😢" = "red"),
        labels = c("💰" = "Win", "😢" = "Lose")
    ) +
    guides(fill = guide_legend(title = "Result"))
```


This simplified slot machine simulation demonstrates several key tidyverse concepts:

1. Using `tibble()` to create a data frame
2. Utilizing `sample()` for random selection
3. Employing `mutate()` to add new columns based on conditions
4. Using `summarise()` to calculate summary statistics
5. Visualizing results with `ggplot2`

## Hands-On Coding 💻

Let's explore our slot machine simulation with some simple exercises:

1. Count how many times each symbol appears in the first reel (symbol1) after 100 spins.

2. Calculate the percentage of wins in 100 spins.

<div id="hidden-content2" style="display: none;">

```{r}
# Simulate 100 spins
set.seed(123) # For reproducibility
results <- play_slot_machine(100)

# 1. Count symbols in the first reel
symbol_counts <- results %>%
    count(symbol1, name = "frequency") %>%
    arrange(desc(frequency))

print("Symbol counts in the first reel:")
print(symbol_counts)

# 2. Calculate win percentage
win_percentage <- results %>%
    summarise(win_percent = mean(win)*100) %>%
    pull(win_percent)
print(paste("Win percentage:", round(win_percentage, 2), "%"))
```

</div>

# Conclusion

In this chapter, we've introduced the tidyverse and applied its powerful functions to manipulate and visualize data. We've built on our previous knowledge of dice and cards to create a virtual slot machine, demonstrating how tidyverse can be used for more complex data operations and analysis.

These skills will be invaluable as you continue your journey in data analysis and visualization with R. In the next chapter, we'll explore more advanced tidyverse functions and apply them to real-world datasets in digital humanities!

<iframe src="float_traffic.html" width="200px" height="200px" style="border:none; position: fixed; bottom: 10px; right: 10px; z-index: 9999;" scrolling="no"></iframe>


<iframe src="float_dash.html" width="200px" height="200px" style="border:none; position: fixed; bottom: 10px; left: 10px; z-index: 9999;" scrolling="no"></iframe>