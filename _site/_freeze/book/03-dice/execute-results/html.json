{
  "hash": "74a02bdbdae3b50f7ba3a6cb4aa5a941",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"¬ß3 Rolling the Dice üé≤\"\nsubtitle: R Basics\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-tools: false\n    code-link: true\n    callout-fold: true\n    highlight-style: github\n    include-in-header:\n      text: |\n        <script src=\"quiz.js\"></script>\n        <script src=\"content-switch.js\"></script>\nexecute:\n  freeze: auto\n---\n\n\n\n\n\n\nWelcome to your first hands-on project with R! We'll create a virtual pair of dice to learn fundamental R concepts. Just as historians analyze artifacts or literary scholars examine texts, we'll be examining the building blocks of data analysis.\n\n::: {.callout-note collapse=\"true\"}\n## Why Dice?\nDice serve as an excellent starting point for learning R basics because:\n\n1. They're simple and familiar objects, making the concepts easier to grasp.\n2. Simulating dice rolls allows us to practice creating variables, using functions, and generating random numbers - all fundamental programming concepts.\n3. Results are easily verifiable, helping you build confidence in your code.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Learning Objectives\n- üñ•Ô∏è Get comfortable with the RStudio interface - your new digital work space\n- üß± Learn to create and manipulate R objects - the building blocks of R\n- üõ†Ô∏è Explore R functions - tools to automate repetitive tasks in your research\n- üìò Introduction to Quarto documents - seamlessly combine your analysis and narrative\n:::\n\n# RStudio User Interface\n\n## Understanding the RStudio Interface üñ•Ô∏è\n\nWhen you open RStudio, you'll see four main panes:\n\n1. **Console** (usually bottom-left): This is where you type R commands and see results. Think of it as a conversation with R - you ask questions, and R answers.\n\n2. **Source** (usually top-left): Here you write and edit R scripts. It's like a digital notebook for your code.\n\n3. **Environment** (usually top-right): This shows data and objects in R's memory. Imagine it as a shelf where R stores all the information you've given it.\n\n4. **Files/Plots/Packages/Help** (usually bottom-right): This multi-purpose pane is like a Swiss Army knife, offering file management, visualizations, add-ons, and documentation.\n\n## Running R Code üèÉ‚Äç‚ôÇÔ∏è\n\nThere are several ways to execute R code in RStudio:\n\n1. **Using the Console:**\n   - Type code directly into the Console and press Enter.\n\n2. **Using the Source Editor:**\n   - Write code in the Source Editor.\n   - Run a single line: Place cursor on the line and press Ctrl+Enter (Cmd+Enter on Mac).\n   - Run multiple lines: Highlight lines and press Ctrl+Enter (Cmd+Enter on Mac).\n   - Run entire script: Click \"Run\" button or press Ctrl+Shift+Enter (Cmd+Shift+Enter on Mac).\n\n::: {.callout-tip}\n## Pro Tip\nWriting code in the Source Editor allows you to save, edit, and rerun your entire analysis easily.\n:::\n\n\n## Learning Check üèÅ \n\n<div id=\"quiz1\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What are the four main panes in RStudio?\",\n      options: [\n        \"Editor, Terminal, Viewer, Packages\",\n        \"Console, Source, Environment, Files/Plots/Packages/Help\",\n        \"Code, Output, Data, Plots\",\n        \"Script, Console, Workspace, Help\"\n      ]\n    },\n    {\n      text: \"Where would you typically write and save your R scripts?\",\n      options: [\n        \"Console\",\n        \"Source Editor\",\n        \"Environment\",\n        \"Files pane\"\n      ]\n    },\n    {\n      text: \"How can you run a single line of code from the Source Editor?\",\n      options: [\n        \"Click the \\\"Run\\\" button\",\n        \"Press Ctrl+Shift+Enter (Cmd+Shift+Enter on Mac)\",\n        \"Place cursor on the line and press Ctrl+Enter (Cmd+Enter on Mac)\",\n        \"Double-click the line\"\n      ]\n    }\n  ],\n  answers: [1, 1, 2]\n}, \"quiz1\");\n</script>\n\n## Hands-On Coding üíª\n\nTry the following:\n\n1. Open RStudio and create a new R script named \"my_first_script.R\"\n2. In the script, write a simple calculation (e.g., `5 * 7`)\n3. Run this calculation using different methods:\n   - Console\n   - Running a single line\n   - Running the entire script\n4. Observe where the result appears in the RStudio interface\n\n<div id=\"hidden-content1\" style=\"display: none;\">\n\n```\n# In my_first_script.R\n5 * 7\n\n# In Console\n> 5 * 7\n[1] 35\n\n```\n</div>\n\n<script>\ncreateToggleSection('button1', 'hidden-content1');\n</script>\n\n\n\n# Objects in R üì¶\n\nIn R, we store data in things called *objects*. You can think of an object as a container with a label üì¶. The label is the name we give to the object, and inside the container is our data.\n\nFor example, we can create an object called `my_age` and store a number in it:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_age <- 22\n```\n:::\n\n\n\n\n\nThis is similar to how you might label a box \"Books\" before putting books inside it. Now, whenever R sees `my_age`, it knows to use the value 22.\n\n::: {.callout-note}\n## Key Concepts\n- **Objects**: Containers for storing data in R.\n- **Assignment Operator** (`<-`): Used to assign values to objects.\n:::\n\n::: {.callout-tip}\n## Naming Objects\nWhen naming objects in R:\n\n- Names can't start with a number\n- Avoid special symbols like ^, !, $, @, +, -, /, or *\n- R is case-sensitive, so `Name` and `name` are different objects\n- Avoid using names of existing functions or objects\n\n:::\n\n\n## Creating a Die as an Object üé≤\n\nLet's start by creating a single die:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- 1:6\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.callout-note}\n## Key Concepts\n- **Vector**: A basic container that can hold multiple items of the same type.\n:::\n\n::: {.callout-tip}\n## The Colon Operator\nThe colon operator (`:`) returns every integer between two integers. It's an easy way to create a sequence of numbers.\n:::\n\nüôãüèª‚Äç‚ôÄÔ∏è What if I want to create a vector that's not a sequence of numbers?\n\n### Combining Data: `c()` \nIn R, `c()` stands for \"combine\" or \"concatenate\". It's used to create vectors, which are sequences of data elements of the same type. For example:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a vector of numbers\nnumbers <- c(2, 4, 6, 8, 10)\nnumbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# Creating a vector of characters (text)\nfruits <- c(\"apple\", \"banana\", \"cherry\")\nfruits\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"apple\"  \"banana\" \"cherry\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Creating a vector of logical values\nlogical_values <- c(TRUE, FALSE, TRUE, TRUE)\nlogical_values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# You can also mix data types, but R will convert them to a single type\nmixed <- c(1, \"two\", TRUE)\nmixed # R converts all to characters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"    \"two\"  \"TRUE\"\n```\n\n\n:::\n:::\n\n\n\n\n\n<br>\nThe `c()` function is versatile and essential for creating custom datasets in R. You can use it to make lists of any kind of data you're working with in your research.\n\n\n## Manipulating Objects\n\nYou can perform various operations on your `die` object:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\ndie * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10 12\n```\n\n\n:::\n\n```{.r .cell-code}\ndie / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5 1.0 1.5 2.0 2.5 3.0\n```\n\n\n:::\n:::\n\n\n\n\n\n<br>\nü§® What do you notice about the results of the above operations?\n\n::: {.callout-note}\n## Vectorized Operations in R\nR performs these operations element-wise on the `die` object because it uses vectorized operations. This means:\n\n1. Each element in the `die` vector is individually operated on.\n2. The operation is applied to every element simultaneously.\n3. A new vector of the same length is returned as the result.\n\nThis vectorized approach makes R efficient for handling data and allows for concise, readable code when working with vectors or larger datasets.\n:::\n\n\n## Learning Check üèÅ\n\n<div id=\"quiz2\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What is an object in R?\",\n      options: [\n        \"A function that performs calculations\",\n        \"A container for storing data\",\n        \"A type of plot or graph\",\n        \"A programming language\"\n      ]\n    },\n    {\n      text: \"How do you create an object in R?\",\n      options: [\n        \"Using the create() function\",\n        \"Using the assignment operator (<-)\",\n        \"Using the new() function\",\n        \"Using the object() function\"\n      ]\n    },\n    {\n      text: \"Which of the following is NOT a rule for naming objects in R?\",\n      options: [\n        \"Names can't start with a number\",\n        \"Avoid special symbols like ^, !, $, @, +, -, /, or *\",\n        \"R is case-sensitive\",\n        \"Names must be in all uppercase letters\"\n      ]\n    }\n  ],\n  answers: [1, 1, 3]\n}, \"quiz2\");\n</script>\n\n## Hands-On Coding üíª\n\nTry the following:\n\n1. Create an object called `favorite_number` and assign it your favorite number.\n2. Create a vector called `lucky_numbers` with 3-5 numbers you consider lucky.\n3. Use the `length()` function to find out how many lucky numbers you have.\n4. Create a new vector called `unlucky_numbers` by subtracting 1 from each of your `lucky_numbers`.\n5. Create a vector called `all_numbers` that combines your `lucky_numbers` and `unlucky_numbers`.\n\n\n<div id=\"hidden-content2\" style=\"display: none;\">\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Create favorite_number\nfavorite_number <- 7\n\n# 2. Create lucky_numbers\nlucky_numbers <- c(3, 7, 13)\n\n# 3. Use length() function\nlength(lucky_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# 4. Create unlucky_numbers\nunlucky_numbers <- lucky_numbers - 1\n\n# 5. Combine vectors\nall_numbers <- c(lucky_numbers, unlucky_numbers)\nprint(all_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  7 13  2  6 12\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: {.callout-tip}\n## Printing in R\nIn R, using `print()` is often optional when working in the console. Simply typing the object name (e.g., `all_numbers`) will automatically display its contents. However, `print()` is useful in functions or scripts where you want to ensure output is displayed. It's also helpful for explicitly showing your intent to output a value.\n:::\n\n</div>\n\n<script>\ncreateToggleSection('button2', 'hidden-content2');\n</script>\n\n\n\n# Functions in R üõ†Ô∏è\n\nIn R programming, functions are like specialized tools that help you perform specific tasks. Just as you might use a hammer to drive a nail or a screwdriver to tighten a screw, you use functions in R to perform particular operations on your data.\n\n## Key Concepts of Functions in R\n\n1. **Purpose**: Functions are reusable blocks of code that perform a specific task.\n\n2. **Structure**: A function typically has three parts:\n   - **Name**: What you call the function (e.g., `sum`, `mean`, `plot`)\n   - **Arguments**: Input values the function needs to do its job\n   - **Body**: The code that defines what the function does\n\n   Here's the generic structure of a function in R:\n\n\n\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   name_of_function <- function(argument1, argument2, ...) {\n     # Body of the function\n     # Perform operations using the arguments\n     \n     return(result)  # Output of the function\n   }\n   ```\n   :::\n\n\n\n\n\n   In this structure:\n   - `name_of_function` is where you specify the function's name\n   - `function()` keyword defines it as a function\n   - `(argument1, argument2, ...)` are the inputs the function accepts\n   - The code between `{` and `}` is the body of the function\n   - `return()` specifies what the function outputs\n\n   Now, let's look at a specific example:\n\n\n\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   double_value <- function(x) {\n     result <- x * 2\n     return(result)\n   }\n   ```\n   :::\n\n\n\n\n   In this example:\n   - The function **name** is `double_value`\n   - It has one **argument**: `x`\n   - The **body** is the code between the curly braces `{ }`\n   - The `return()` statement specifies what the function outputs\n\n   You can use this function like this:\n\n\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   doubled_value <- double_value(5)\n   doubled_value\n   ```\n   \n   ::: {.cell-output .cell-output-stdout}\n   \n   ```\n   [1] 10\n   ```\n   \n   \n   :::\n   :::\n\n\n\n\n\n3. **Input and Output**: Functions often take input (arguments) and return output (results).\n\n4. **Built-in vs. Custom**: R has many built-in functions, but you can also create your own. You can also set default values for the arguments so that the function can still run without input. \n\n5. **Syntax**: To use a function, type its name followed by parentheses containing any arguments:\n   \n   `function_name(argument1, argument2, ...)`\n\n6. **Documentation**: You can learn about a function's use and arguments with `?function_name` in the console.\n\nRemember, functions are powerful tools that help you organize and streamline your code, making your analysis more efficient and readable.\n\n\n## Using Built-in Functions\n\nR comes with many built-in functions that you can use right away. These are like the basic tools that come in a starter toolkit. Let's look at a few examples:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The round() function rounds numbers\nround(3.14159)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# The sum() function adds numbers together\nsum(1, 2, 3, 4, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n```{.r .cell-code}\n# The length() function tells you how many items are in a list or vector\nlength(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n\n\n\nUsing a function is straightforward. You write the name of the function followed by parentheses. Inside the parentheses, you put the information (called \"arguments\") that the function needs to do its job.\n\n::: {.callout-note}\n## Comments in R\nDid you notice the `#` ... part in the above code chunk?\n\nIn R, the `#` symbol is used to create comments. Anything after a `#` on a line is ignored by R when running the code. Comments are useful for:\n\n1. Explaining what your code does\n2. Temporarily disabling code without deleting it\n3. Organizing your script into sections\n\n:::\n\n### Simulating Randomness: `sample()`\n\nTo simulate rolling a die, we need a function that can randomly select a number. The `sample()` function is perfect for this task. It's like reaching into a bag and pulling out a random item.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Roll the die once\nsample(x = die, size = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n# Roll the die again\nsample(x = die, size = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n\nIn this case, `x = die` tells the function what to choose from (our die object), and `size = 1` says to pick one number.\n\n::: {.callout-note}\n## Sampling With Replacement\nBy default, `sample()` doesn't put the number back in the \"bag\" after selecting it. For dice rolling, we want to allow the same number to be selected multiple times. Use `replace = TRUE` in the `sample()` function to achieve this.\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Roll two dice\nsample(die, size = 2, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 1\n```\n\n\n:::\n:::\n\n\n\n\n\n## Writing Your Own Functions\n\nLet's create a function to roll two dice:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll <- function() {\n  dice <- sample(die, size = 2, replace = TRUE)\n  sum(dice)\n}\n```\n:::\n\n\n\n\n\nLet's break this down:\n\n1. `roll <- function() { ... }` creates a new function named `roll`.\n2. Inside the curly braces `{ }` is the \"body\" of the function - the instructions for what it should do.\n3. `dice <- sample(die, size = 2, replace = TRUE)` rolls two dice.\n4. `sum(dice)` adds up the numbers rolled.\n\nNow, whenever you want to roll two dice and get the sum, you can simply use:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nroll()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Learning Check üèÅ\n\n<div id=\"quiz3\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What is a function in R?\",\n      options: [\n        \"A type of data structure\",\n        \"A reusable block of code that performs a specific task\",\n        \"A method for creating objects\",\n        \"A special type of variable\"\n      ]\n    },\n    {\n      text: \"What are the components of a function in R?\",\n      options: [\n        \"Name, arguments, and body\",\n        \"Header, content, and footer\",\n        \"Input, process, and output\",\n        \"Declaration, definition, and call\"\n      ]\n    },\n    {\n      text: \"What is the purpose of arguments in a function?\",\n      options: [\n        \"To name the function\",\n        \"To specify the return value\",\n        \"To provide input values for the function to use\",\n        \"To define the scope of the function\"\n      ]\n    }\n  ],\n  answers: [1, 0, 2]\n}, \"quiz3\");\n</script>\n\n## Hands-On Coding üíª\n\nLet's apply what we've learned to simulate flipping a coin. This is similar to rolling a die, but with only two possible outcomes.\n\n1. Create an object called `coin` that represents the two sides of a coin (use the numbers 1 and 2).\n\n2. Use the `sample()` function to simulate flipping the coin once.\n\n3. Create a function called `flip_coin()` that simulates flipping a coin and returns the result.\n\n4. Modify your `flip_coin()` function to have an argument named n_flips so that the user could specify the number of time the coin is flipped.  \n\n\n\n<div id=\"hidden-content3\" style=\"display: none;\">\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Create coin object\ncoin <- 1:2\n# 2. Flip coin once using sample()\nsample(coin, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. Create flip_coin() function\nflip_coin <- function() {\nsample(coin, size = 1)\n}\n# 4. Modify flip_coin() to have a n_flips argument\nflip_coin <- function(n_flips) {\n  sample(coin, size = n_flips, replace = TRUE)\n}\n```\n:::\n\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('button3', 'hidden-content3');\n</script>\n\n\n\n# Introduction to Quarto üìò\n\nQuarto is a powerful tool that allows you to combine R code, its output, and explanatory text in one document. It is like a special notebook where you can:\n\n1. Write normal text (like in Microsoft Word)\n2. Add R code (and other programming lanugage too!) to create charts or analyze data\n3. See the results of your code right next to your text\n\n## Why Use Quarto?\n\n1. **Reproducibility**: Quarto documents contain both code and narrative that make it easy to reproduce your analyses. \n2. **Professional Presentation**: Create polished, professional-looking documents.\n3. **Flexibility**: Output to various formats like HTML, PDF, or slideshows.\n\n::: {.callout-tip}\n### The Importance of Reproducibility\nIn the humanities, as in all academic fields, being able to reproduce results is crucial. When you write your R code in scripts, you're creating a record of every step in your analysis. This is like creating detailed footnotes or citations in a research paper - it allows others (or future you!) to follow your work exactly.\n\nUsing scripts also makes it easy to make changes and rerun your entire analysis, which is much more efficient than trying to remember and retype everything in the console.\n:::\n\n## Quarto Document\n\nA Quarto document has two main parts:\n- A header at the top (called YAML header)\n- The main content (text and code)\n\nBelow is an example:\n```\nyaml\n---\ntitle: \"My First Quarto Document\"\nauthor: \"Your Name\"\nformat: html\n---\nThis is where you write your content.\n\nYou can use markdown to format your text or use the \"visual editing mode\" to have an experience similar to Microsoft Word editor.\n\n```\n\n## Essential Quarto Concepts\n\n### Editing Quarto Files: Source vs. Visual Editor\nQuarto documents can be edited in two modes: Source and Visual.\n\n1. **Source Editor**: This mode shows you the raw Markdown and YAML content of your document. It's great for:\n   - Precise control over your document's structure\n   - Editing code chunks directly\n   - Working with advanced Quarto features\n\n\n2. **Visual Editor**: This mode provides a WYSIWYG (What You See Is What You Get) interface, similar to word processors like Microsoft Word. It's useful for:\n   - Formatting text without knowing Markdown syntax\n   - Easily inserting tables, images, and other elements\n   - Collaborating with team members who may not be familiar with Markdown\n\n\n::: {.callout-tip}\n## Markdown Basics\nMarkdown is a lightweight markup language used in Quarto documents. Here are some basic syntax examples:\n\n- `# Heading 1`, `## Heading 2`, `### Heading 3`, etc. for headings\n- `*italic*` or `_italic_` for *italic text*\n- `**bold**` or `__bold__` for **bold text**\n- `- item` for unordered lists\n- `1. item` for ordered lists\n- `[link text](URL)` for [links](https://quarto.org)\n- `![alt text](image.jpg)` for images\n\nFor a more comprehensive guide, check out Quarto's [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html).\n:::\n\n\n### Rendering\n\nRendering is the process of converting your Quarto document into its final output format (e.g., HTML, PDF, or Word). To render your document:\n\n1. Click the \"Render\" button in RStudio, or\n2. Use the keyboard shortcut Ctrl+Shift+K (Cmd+Shift+K on Mac)\n\nWhen you render, Quarto executes all the code in your document and combines the results with your text to create the final output.\n\n\n\n### (Optional) Code Chunk Options\n\nCode chunks in Quarto can be customized using options. These options control how the code is executed and displayed. Here are some common options:\n\n```{{r}}\n#| label: chunk-name\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n\n# Your R code here\n```\n\n- `label`: Gives the chunk a unique name\n- `echo`: Controls whether the code is displayed in the output (true/false)\n- `eval`: Determines if the code should be executed (true/false)\n- `warning`: Shows or hides warnings (true/false)\n- `message`: Shows or hides messages (true/false)\n\nYou can set these options globally in the YAML header or for individual chunks.\n\n::: {.callout-tip}\n## Pro Tip\nUse code chunk options to control what your readers see. For example, you might hide code for complex calculations but show the results.\n:::\n\n## Learning Check üèÅ\n\n<div id=\"quiz4\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What is Quarto?\",\n      options: [\n        \"A new programming language\",\n        \"A tool for combining R code, output, and explanatory text in one document\",\n        \"A statistical package for R\",\n        \"A version control system\"\n      ]\n    },\n    {\n      text: \"Which of the following is NOT a benefit of using Quarto?\",\n      options: [\n        \"Reproducibility\",\n        \"Presentation\",\n        \"Flexibility\",\n        \"Automatic error correction\"\n      ]\n    },\n    {\n      text: \"How do you include R code in a Quarto document?\",\n      options: [\n        \"By using the <r> tag\",\n        \"By using code chunks denoted by ```{r}\",\n        \"By writing R code directly in the text\",\n        \"By importing an R script file\"\n      ]\n    }\n  ],\n  answers: [1, 3, 1]\n}, \"quiz4\");\n</script>\n\n## Hands-On Coding üíª\n\nLet's practice creating a simple Quarto document about our coin flipping simulation:\n\n1. Create a new Quarto document in RStudio.\n2. Add a title \"Coin Flipping Simulation\" and your name as the author.\n3. Write a brief introduction about coin flipping simulations.\n4. Insert a code chunk that defines your `coin` object and `flip_coin()` function.\n5. Add another code chunk that uses your `flip_coin()` function to simulate flipping a coin 10 times.\n6. Add some text explaining the results.\n7. Render it as an html file. \n\n<div id=\"hidden-content4\" style=\"display: none;\">\n\n```\n---\ntitle: \"Coin Flipping Simulation\"\nauthor: \"Your Name\"\nformat: html\n---\n# Introduction\nIn this document, we'll simulate flipping coins using R functions we've created.\n\n# Defining Our Coin and Flip Function\nFirst, let's define our coin and create a function to flip it:\n\n```\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoin <- 1:2   \n\nflip_coin <- function(n_flips) {\n  sample(coin, size = n_flips, replace = TRUE)\n}\n```\n:::\n\n\n\n\n```\n# Flipping a Coin 10 Times\nNow, let's flip our coin 10 times:\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nten_flips <- flip_coin(10)\nprint(ten_flips)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 2 2 1 2 2 1 1 2 2 2\n```\n\n\n:::\n:::\n\n\n\n\n\n```\nThis simulates flipping a coin 10 times. Each 1 represents heads, and each 2 represents tails. We then count how many times we got heads.\n```\nCongratulations! üéâ You've just created your first Quarto document combining narrative text and code analysis. This is an important step in your journey of digital humanities, as it allows you to present your research and analysis in a clear, reproducible format. As you continue to explore, you'll find that Quarto is a powerful tool for integrating your humanities insights with computational methods.\n\n</div>\n\n<script>\ncreateToggleSection('button4', 'hidden-content4');\n</script>\n\n\n\n# Conclusion\n\n::: {.callout-note}\n## Key Takeaways\n\nIn this chapter, we've covered:\n\n- The basics of R programming through a virtual dice rolling simulation\n- An introduction to the RStudio interface\n- Creating and manipulating R objects\n- Defining and using functions\n- Creating reproducible documents with Quarto\n:::\n\n\nThese foundational skills serve as building blocks for our journey into the world of digital humanities. As we progress, we'll build upon these concepts to perform more complex data analysis and create compelling visualizations.\n\n\n::: {.topic-flow}\n::: {.topic-box .highlight-blue}\nRStudio\n:::\n::: {.topic-box .highlight-green}\nR Basics\n:::\n::: {.topic-box .highlight-yellow}\nFunctions\n:::\n::: {.topic-box .highlight-pink}\nQuarto\n:::\n:::\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}