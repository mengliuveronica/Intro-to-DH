{
  "hash": "c8b9c05873fa6886cb7cf614548198e9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"§6 Quantitative Text Analysis Basics 📊\"\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-link: true\n    highlight-style: github\n    include-in-header:\n      text: |\n        <script src=\"quiz.js\"></script>\n        <script src=\"content-switch.js\"></script>\nfilters: \n - collapse-callout.lua\nexecute:\n  freeze: auto\n---\n\n\n\n\n\n\nWelcome to the world of quantitative text analysis! In this chapter, we'll explore the fundamental concepts and techniques used to prepare text data for analysis. We'll use a collection of classic novels as our dataset to demonstrate these concepts.\n\n::: {.callout-note}\n## Learning Objectives\n- 📖 Understand the basics of text analysis and its applications in Digital Humanities\n- 🧹 Learn essential text preprocessing techniques\n- 🔤 Explore basic text analysis concepts like tokenization and word frequency\n- 📊 Visualize text data using simple techniques like word clouds\n:::\n\n# What is Quantitative Text Analysis? 🤔\n\nQuantitative text analysis (QTA) is a method of analyzing large volumes of text data using computational techniques. It allows researchers to extract meaningful patterns, themes, and insights from textual data that would be difficult or impossible to analyze manually.\n\n## QTA in Digital Humanities\n\nIn Digital Humanities, QTA offers powerful tools for exploring large text corpora:\n\n1. **Scale**: Analyze vast collections of texts, revealing patterns across time periods, genres, or authors.\n\n2. **Distant Reading**: Observe broader patterns in literature and cultural production.\n\n3. **Hypothesis Testing**: Empirically test literary and cultural theories across large datasets.\n\n4. **Discovery**: Reveal unexpected patterns or connections, sparking new research questions.\n\n5. **Interdisciplinary**: Combine methods from linguistics, computer science, and statistics with humanistic inquiry.\n\n6. **Visualization**: Present textual data in new, visually interpretable ways.\n\nQTA complements traditional close reading, offering Digital Humanities scholars new perspectives on cultural, historical, and literary phenomena.\n\n## QTA Workflow\n\n![](images/QTA%20workflow.png)\n\n\nThe Quantitative Text Analysis (QTA) workflow illustrates the systematic process of analyzing textual data using computational methods. This workflow can be divided into five main stages:\n\n1. **Data Acquisition**:\n\n   - Data retrieval from various sources\n   - Web scraping techniques\n   - Social media API integration\n   - ...\n\n2. **Text Preprocessing and Standardization**:\n\n   - **Tidy structuring**: Organizing data into a consistent format\n   - **Noise removal**: Eliminating capitalization, special characters, punctuation, and numbers\n   - **Tokenization**: Breaking text into individual units (words, sentences)\n   - **Stopwords removal**: Eliminating common words with little semantic content\n   - **Stemming or lemmatization**: Reducing words to their root forms\n   - **POS (Part-of-Speech) tagging**: Labeling words with their grammatical categories\n   - **Named Entity Recognition (NER)**: Identifying and classifying named entities in text\n   - ...\n\n3. **Text Representation**:\n\n   - **Count-based methods**:\n     * Bag-of-words representation\n     * Term frequency-inverse document frequency (TF-IDF)\n     * ...\n   - **Context-based methods**:\n     * N-grams analysis\n     * Co-occurrence matrix\n     * Word embeddings (e.g., Word2Vec, GloVe)\n     * ...\n\n4. **Data Analysis and Modeling**:\n\n   - **Sentiment Analysis**: Determining the emotional tone of text\n   - **Topic Modeling**: Discovering abstract topics in a collection of documents\n   - **Social Network Analysis**: Analyzing relationships and structures in text data\n   - ...\n\n5. **Visualization & Reporting**:\n\n   - Visualizing sentiment trends over time or across categories\n   - Creating network graphs to represent relationships in text data\n   - Displaying topic distributions and their evolution\n   - Summarizing findings and insights in reports or publications\n   - ...\n\nThis workflow emphasizes the importance of a structured approach to text analysis, from raw data to final insights. Each stage builds upon the previous one, with the flexibility to iterate or adjust methods based on the specific requirements of the analysis and research questions. The process can be iterative, with researchers often moving back and forth between stages as needed to refine their analysis and results.\n\n\n\n:::{.callout-tip}\n## Install Package Manager `pacman`\n\nWe will be using some new packages that you probably haven't installed. To streamline the process of package installation, let's introduce a helpful tool for managing R packages: `pacman`. The `pacman` package is a convenient package management tool for R that simplifies the process of loading and installing multiple packages.\n\nKey features of `pacman`:\n\n1. It combines the functionality of `install.packages()` and `library()` into a single function `p_load()`.\n2. It automatically installs packages if they're not already installed.\n3. It can load multiple packages with a single line of code.\n\nLet's install `pacman`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"pacman\")) install.packages(\"pacman\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: pacman\n```\n\n\n:::\n:::\n\n\n\n\nOnce we load the `pacman` library, we can use `p_load()` to efficiently load (and install if necessary) the packages we'll need:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\np_load(tidyverse, tidytext)\n```\n:::\n\n\n\n\nThis single line will ensure all the packages we need are installed and loaded, streamlining our setup process.\n:::\n\n\n\n# Text Preprocessing and Standardization Techniques 🧹\n\n![](images/preprocessing.png)\n\n## Understanding Text Preprocessing\n\nText preprocessing is the crucial first step in quantitative text analysis. It involves cleaning and standardizing raw text data to make it suitable for computational analysis.\n\n**Why is it important?**\n\n- Improves data quality and consistency\n- Reduces noise and irrelevant information\n- Enhances the accuracy of subsequent analyses\n- Makes text data more manageable for computational processing\n\n**Fundamental considerations:**\n\n1. **Purpose**: The preprocessing steps you choose should align with your research questions and analysis goals.\n2. **Language**: Different languages may require specific preprocessing techniques.\n3. **Domain**: The nature of your texts (e.g., literary, social media, historical) may influence preprocessing decisions.\n4. **Information preservation**: Be cautious not to remove potentially important information during preprocessing.\n5. **Reproducibility**: Document your preprocessing steps to ensure your analysis can be replicated.\n\nRemember, there's no one-size-fits-all approach to preprocessing. The techniques you apply should be carefully considered based on your specific research context.\n\n\nTo showcase the various techniques for text preprocessing, let's first create a mock dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmock_data <- tibble(\n  text = c(\n    \"The Quick Brown Fox Jumps Over the Lazy Dog! Data Science meets Cultural Studies.\",\n    \"Digital Humanities 101: An Introduction (2024); Exploring Big Data in Literature & History\",\n    \"R Programming for Text Analysis - Chapter 3. Machine Learning for Textual Analysis\",\n    \"NLP techniques & their applications in DH research; Computational Methods in Humanities Research?\",\n    \"20+ ways to visualize data 📊: graphs, charts, and more! Digital Archives and Text Mining Techniques.\"\n  )\n)\n```\n:::\n\n\n\n\nLet's take a closer look at our mock dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(mock_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  text                                                                          \n  <chr>                                                                         \n1 The Quick Brown Fox Jumps Over the Lazy Dog! Data Science meets Cultural Stud…\n2 Digital Humanities 101: An Introduction (2024); Exploring Big Data in Literat…\n3 R Programming for Text Analysis - Chapter 3. Machine Learning for Textual Ana…\n4 NLP techniques & their applications in DH research; Computational Methods in …\n5 20+ ways to visualize data 📊: graphs, charts, and more! Digital Archives and…\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-note}\n## Reflection 🤔\n\nExamine the mock dataset above and reflect on the following questions:\n\n- What characteristics or elements do you notice that might need preprocessing for effective text analysis? \n\n- What challenges might these elements pose for text analysis? How might preprocessing help address these challenges?\n:::\n\n<details>\n<summary>Click to Reveal Some Insights</summary>\n\n1. **Capitalization**: Words are inconsistently capitalized (e.g., \"The Quick Brown Fox\" vs. \"Data Science\"). This could lead to treating identical words as different entities.\n\n2. **Punctuation**: Various punctuation marks are present, including periods, exclamation marks, colons, and semicolons. These might interfere with word tokenization and analysis.\n\n3. **Numbers**: Some entries contain numbers (e.g., \"101\", \"2024\", \"3\", \"20+\"). Depending on the analysis goals, these might need to be removed or treated specially.\n\n4. **Special Characters**: There are ampersands (&) and hyphens (-) which might need special handling.\n\n5. **Sentence Structure**: Each row contains multiple sentences. For sentence-level analysis, we might need to split these.\n\n6. **Abbreviations**: \"NLP\" and \"DH\" are present. We might need to decide whether to expand these or treat them as single tokens.\n\n7. **Stop Words**: Common words like \"the\", \"and\", \"for\" are present. These might not contribute much meaning to the analysis.\n\nThese observations highlight the need for various preprocessing steps, including:\n- Converting text to lowercase for consistency\n- Removing or standardizing punctuation\n- Handling numbers and special characters\n- Sentence or word tokenization\n- Removing stop words\n\nBy addressing these elements through preprocessing, we can prepare our text data for more effective and accurate analysis.\n</details>\n\n## Understanding Regular Expressions\n\nBefore we dive into analyzing our mock data, let's explore a powerful tool in text analysis: **Regular Expressions**. \n\nHave you ever wondered how computer programs like Excel or Word can find the exact word or phrase you're searching for? Or how they can replace all instances of a word throughout a document in just seconds? These everyday text operations are powered by a concept called **pattern matching**, and regular expressions take this idea to a whole new level.\n\nRegular Expressions, often called **regex**, are like a special language for describing patterns in text. Imagine you're a librarian with a magical magnifying glass that can find not just specific words, but patterns in books.\n\n### Key Concepts\n\n1. **Pattern Matching**: Instead of searching for exact words, regex lets you search for patterns. For example, you could search for:\n   - All words that start with \"pre\"\n   - Any sequence of five letters\n   - All dates in a specific format\n\n2. **Text Processing**: Once you find these patterns, you can do things like:\n   - Highlight them\n   - Replace them with something else\n   - Extract them for further study\n\n### Examples of Regex\nTo give you a better idea of what regular expressions look like and how they work, let's look at an example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_load(stringr)\n\n# Sample text\ntext <- \"Jane Austen wrote Pride and Prejudice. Elizabeth Bennet is the protagonist.\"\n\n# Regex pattern for capitalized words\npattern <- \"\\\\b[A-Z][a-z]+\\\\b\"\n\n# Find all matches\nmatches <- str_extract_all(text, pattern)\n\n# Print the matches\nprint(matches)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"Jane\"      \"Austen\"    \"Pride\"     \"Prejudice\" \"Elizabeth\" \"Bennet\"   \n```\n\n\n:::\n\n```{.r .cell-code}\n# To see which words were matched in context\nstr_view(text, pattern)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <Jane> <Austen> wrote <Pride> and <Prejudice>. <Elizabeth> <Bennet> is the protagonist.\n```\n\n\n:::\n:::\n\n\n\n\n:::{.callout-note}\n## Regex breakdown\n\nLet's break down the regex pattern `\\\\b[A-Z][a-z]+\\\\b`:\n\n1. `\\\\b`: This represents a word boundary. In R, we need to escape the backslash, so we use two. It ensures we're matching whole words, not parts of words.\n\n2. `[A-Z]`: This character class matches any single uppercase letter from A to Z.\n\n3. `[a-z]+`: This matches one or more lowercase letters.\n   - `[a-z]` is a character class that matches any single lowercase letter.\n   - The `+` quantifier means \"one or more\" of the preceding element.\n\n4. `\\\\b`: Another word boundary to end the match.\n\nSo, this pattern matches:\n- Words that start with a capital letter (like names or the first word of a sentence)\n- Followed by one or more lowercase letters\n- As whole words, not parts of larger words\n\nIt won't match:\n- ALL CAPS words\n- words with numbers or symbols\n- Single-letter capitalized words like \"I\" or \"A\"\n\nThis pattern is useful for finding proper nouns in the middle of sentences, like names of people or places.\n:::\n\n\n### POSIX Character Classes: A Friendly Starting Point\n\nYou may find that regex can be quite hard to read for humans. POSIX character classes are pre-defined sets of characters that make regex more accessible and portable across different systems. They simplify regex patterns and address some common challenges in text processing:\n\n1. **Simplification**: POSIX classes provide easy-to-remember shorthand for common character groups. Instead of writing `[A-Za-z]` to match any letter, you can use `[:alpha:]`.\n\n2. **Consistency**: They ensure consistent behavior across different operating systems and programming languages. For example, `[A-Z]` might behave differently in some contexts depending on the locale settings, but `[:upper:]` is always consistent.\n\n3. **Internationalization**: POSIX classes can handle characters beyond the ASCII range, making them useful for working with texts in various languages.\n\n4. **Readability**: They make regex patterns more readable and self-explanatory, which is especially helpful when sharing code or working in teams.\n\nHere are some useful POSIX character classes:\n\n- `[:alpha:]`: Matches any alphabetic character (equivalent to `[A-Za-z]` in English texts)\n- `[:digit:]`: Matches any digit (equivalent to `[0-9]`)\n- `[:lower:]`: Matches any lowercase letter\n- `[:upper:]`: Matches any uppercase letter\n- `[:punct:]`: Matches any punctuation character\n- `[:space:]`: Matches any whitespace character (spaces, tabs, newlines)\n\nBy using these classes, you can create more robust and readable regex patterns. For example, instead of `[A-Za-z0-9]` to match any alphanumeric character, you could use `[[:alpha:][:digit:]]`, which is clearer in its intent and works across different language settings.\n\n#### Examples in Humanities Context\n\n1. Finding capitalized words: \n   - Pattern: `[[:upper:]][[:lower:]]+`\n   - This would match words like \"Shakespeare\", \"London\", \"Renaissance\"\n\n2. Identifying years:\n   - Pattern: `[[:digit:]]{4}`\n   - This would match years like \"1564\", \"1616\", \"2023\"\n\n3. Locating punctuation:\n   - Pattern: `[[:punct:]]`\n   - This would find all punctuation marks in a text\n\nRemember, regex is a tool that becomes more useful as you practice. Start simple, and you'll gradually be able to create more complex patterns for your research needs!\n\n\n## Learning Check 🏁 \n\n<div id=\"quiz-qta-intro\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What is the primary purpose of Quantitative Text Analysis (QTA)?\",\n      options: [\n        \"To translate texts into different languages\",\n        \"To analyze large volumes of text data using computational techniques\",\n        \"To improve the grammar and style of written texts\",\n        \"To create new literary works using artificial intelligence\"\n      ]\n    },\n    {\n      text: \"Which of the following is NOT a benefit of QTA in Digital Humanities?\",\n      options: [\n        \"Analyzing vast collections of texts\",\n        \"Observing broader patterns in literature\",\n        \"Replacing close reading entirely\",\n        \"Empirically testing literary theories\"\n      ]\n    },\n    {\n      text: \"In the QTA workflow, what needs to be done before text can be transformed to numbers (i.e., text representation)?\",\n      options: [\n        \"Topic Modeling\",\n        \"Sentiment Analysis\",\n        \"Preprocessing Steps\",\n        \"Visualization\"\n      ]\n    },\n    {\n      text: \"What is the main purpose of regular expressions (regex) in text analysis?\",\n      options: [\n        \"To translate text between languages\",\n        \"To find and match patterns in text\",\n        \"To increase the font size of text\",\n        \"To create new words in a language\"\n      ]\n    },\n    {\n      text: \"Which POSIX character class would you use to match any punctuation mark?\",\n      options: [\n        \"[:alpha:]\",\n        \"[:digit:]\",\n        \"[:lower:]\",\n        \"[:punct:]\"\n      ]\n    }\n  ],\n  answers: [1, 2, 2, 1, 3]\n}, \"quiz-qta-intro\");\n</script>\n\n\nNow let's proceed to preprocess the mock dataset!\n\n## Tidy Structuring\n\nThe first step in our preprocessing pipeline is to ensure our data is in a tidy format. Remember a tidy format means one observation per row and the unit of the observation, whether it is a sentence, or a word, varies from project to project depending on the nature of your study and research questions. For this example, let's assume we want one sentence per row. We'll use `separate_rows()` with a regular expression (regex) pattern to achieve this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_data <- mock_data %>%\n  separate_rows(text, sep = \"(?<=[.!?])\\\\s+(?=[A-Z])\")\n\nprint(tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 1\n  text                                                                          \n  <chr>                                                                         \n1 The Quick Brown Fox Jumps Over the Lazy Dog!                                  \n2 Data Science meets Cultural Studies.                                          \n3 Digital Humanities 101: An Introduction (2024); Exploring Big Data in Literat…\n4 R Programming for Text Analysis - Chapter 3.                                  \n5 Machine Learning for Textual Analysis                                         \n6 NLP techniques & their applications in DH research; Computational Methods in …\n7 20+ ways to visualize data 📊: graphs, charts, and more!                      \n8 Digital Archives and Text Mining Techniques.                                  \n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.callout-note}\n## Understanding `separate_rows()` \n\n1. `separate_rows()` Function:\n   - Part of the tidyr package in tidyverse\n   - Separates a column into multiple rows based on a delimiter\n   - Syntax: `separate_rows(data, column, sep = delimiter)`\n\n2. Regular Expression (Regex) Pattern:\n   - `(?<=[.!?])`: Positive lookbehind, matches a position after a period, exclamation mark, or question mark\n   - `\\\\s+`: Matches one or more whitespace characters\n   - `(?=[A-Z])`: Positive lookahead, matches a position before an uppercase letter\n   - Combined, this pattern splits the text at sentence boundaries\n\n3. How it works:\n   - `separate_rows()` applies the regex pattern to split the 'text' column\n   - Each resulting sentence becomes a new row in the dataframe\n   - The original row's other columns (if any) are duplicated for each new sentence row\n:::\n\n\n## Noise Removal\n\n### Capitalization Removal\n\nConverting text to lowercase is a common preprocessing step that helps standardize the text and reduce the vocabulary size. Let's apply this to our tidy data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlowercase_data <- tidy_data %>%\n  mutate(text = tolower(text))\n\nprint(lowercase_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 1\n  text                                                                          \n  <chr>                                                                         \n1 the quick brown fox jumps over the lazy dog!                                  \n2 data science meets cultural studies.                                          \n3 digital humanities 101: an introduction (2024); exploring big data in literat…\n4 r programming for text analysis - chapter 3.                                  \n5 machine learning for textual analysis                                         \n6 nlp techniques & their applications in dh research; computational methods in …\n7 20+ ways to visualize data 📊: graphs, charts, and more!                      \n8 digital archives and text mining techniques.                                  \n```\n\n\n:::\n:::\n\n\n\n\n### Punctuation and Special Character Removal\n\nRemoving punctuation and special characters can help focus on the words themselves. We'll use a regular expression to remove these:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_data <- lowercase_data %>%\n  # Remove punctuation\n  mutate(text = str_replace_all(text, \"[[:punct:]]\", \"\")) %>%\n  # Remove special characters (including emojis)\n  mutate(text = str_replace_all(text, \"[^[:alnum:][:space:]]\", \"\"))\n\nprint(clean_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 1\n  text                                                                          \n  <chr>                                                                         \n1 the quick brown fox jumps over the lazy dog                                   \n2 data science meets cultural studies                                           \n3 digital humanities 101 an introduction 2024 exploring big data in literature …\n4 r programming for text analysis  chapter 3                                    \n5 machine learning for textual analysis                                         \n6 nlp techniques  their applications in dh research computational methods in hu…\n7 20 ways to visualize data  graphs charts and more                             \n8 digital archives and text mining techniques                                   \n```\n\n\n:::\n:::\n\n\n\n\n### Numbers Removal\n\nDepending on your analysis goals, you might want to remove numbers. Here's how to do that:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_numbers_data <- clean_data %>%\n  mutate(text = str_replace_all(text, \"\\\\d+\", \"\"))\n\nprint(no_numbers_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 1\n  text                                                                          \n  <chr>                                                                         \n1 \"the quick brown fox jumps over the lazy dog\"                                 \n2 \"data science meets cultural studies\"                                         \n3 \"digital humanities  an introduction  exploring big data in literature  histo…\n4 \"r programming for text analysis  chapter \"                                   \n5 \"machine learning for textual analysis\"                                       \n6 \"nlp techniques  their applications in dh research computational methods in h…\n7 \" ways to visualize data  graphs charts and more\"                             \n8 \"digital archives and text mining techniques\"                                 \n```\n\n\n:::\n:::\n\n\n\n\n## Tokenization\n\n::: {.callout-note}\n## What is a token?\nIn text analysis, a \"token\" is the smallest unit of text that we analyze. Most commonly, a token is a single word, but it could also be a character, a punctuation mark, or even a phrase, depending on our analysis needs.\n\nFor example, in the sentence \"The quick brown fox\", each word (\"The\", \"quick\", \"brown\", \"fox\") could be considered a token.\n:::\n\n::: {.callout-tip}\n## What is tokenization?\nTokenization is the process of breaking down a piece of text into its individual tokens. It's like taking a sentence and splitting it into a list of words.\n\nWhy do we do this? Computers can't understand text the way humans do. By breaking text into tokens, we create a format that's easier for computers to process and analyze.\n:::\n\nWe'll use the `unnest_tokens()` function from the `tidytext` package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_load(tidytext)\n\ntokenized_data <- no_numbers_data %>%\n  unnest_tokens(output = word, input = text, token = \"words\")\n\nprint(tokenized_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 1\n   word \n   <chr>\n 1 the  \n 2 quick\n 3 brown\n 4 fox  \n 5 jumps\n 6 over \n 7 the  \n 8 lazy \n 9 dog  \n10 data \n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n\n\n\n:::{.callout-tip}\n## `unnest_tokens()` function\n\nThe `unnest_tokens()` function from the `tidytext` package is a powerful tool for text analysis:\n\n- Purpose: Splits a column into tokens, creating a one-token-per-row structure.\n\nKey Arguments:\n\n- output: Name of the new column for tokens\n- input: Column to be tokenized\n- token: Tokenization unit (e.g., \"words\", \"sentences\", \"ngrams\")\n\nThe `unnest_tokens()` is built on the `tokenizers` package, which means there are a lot of arguments you can tweak to perform multiple operations at once. Below are some common features that you may want to pay attention to:\n\nFeatures:\n\n- Convert to lowercase by default (to_lower = TRUE)\n- Strip punctuations by default (strip_punct = TRUE)\n- Preserves numbers by default (strip_numeric = FALSE)\n- Automaticlaly removes extra white space\n\n:::\n\n\n## Stopwords Removal\n\n::: {.callout-note}\n## What are stopwords?\n\nStopwords are common words that are often removed from text analysis because they typically don't carry much meaning on their own (i.e., \"filler\" words in language). These are words like \"the\", \"is\", \"at\", \"which\", and \"on\".\n\nIn text analysis, removing stopwords helps us focus on the words that are more likely to carry the important content or meaning of the text. It's like distilling a sentence down to its key concepts.\n:::\n\nNow, let's remove stopwords from our tokenized data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(stop_words)\n\ndata_without_stopwords <- tokenized_data %>%\n  anti_join(stop_words)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(word)`\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n## `anti_join()` Function\n\nThe `anti_join()` function is a way to remove items from one list based on another list. Here is how it works:\n\n1. Imagine you have two lists:\n\n   - List A: Your main list (in this case, our tokenized keywords)\n   - List B: A list of items you want to remove (in this case, stopwords)\n\n2. `anti_join()` goes through List A and removes any item that appears in List B.\n\n3. The result is a new list that contains only the items from List A that were not in List B.\n\nIn our context:\n\n- List A is our tokenized keywords\n- List B is the list of stopwords\n- The result is our keywords with all the stopwords removed\n\nIt's like having a big box of Lego bricks (your keywords) and a list of colors you don't want (stopwords). `anti_join()` helps you quickly remove all the Lego bricks of those unwanted colors, leaving you with only the colors you are interested in.\n\nThis function is particularly useful for cleaning text data, as it allows us to efficiently remove common words that might not be relevant to our analysis.\n:::\n\n\n::: {.callout-warning}\n## Caution with Stopword Removal\n\nWhile stopword removal is a common preprocessing step, it's important to consider its implications:\n\n1. **Context Matters**: Words considered \"stop words\" in one context might be meaningful in another. For example, \"the\" in \"The Who\" (band name) carries meaning.\n\n2. **Negations**: Removing words like \"not\" can invert the meaning of surrounding words, potentially affecting sentiment analysis.\n\n3. **Phrase Meaning**: Some phrases lose their meaning without stop words. \"To be or not to be\" becomes simply \"be be\" after stopword removal.\n\n4. **Language Specificity**: Stop word lists are language-specific. Ensure you're using an appropriate list for your text's language.\n\n5. **Research Questions**: Your specific research questions should guide whether and how you remove stop words. Some analyses might benefit from keeping certain stop words.\n:::\n\n::: {.callout-tip}\n## Customizing Stopword Lists (Advanced)\n\nThe `stop_words` dataset in the tidytext package contains stop words from three lexicons: \"onix\", \"SMART\", and \"snowball\". You can customize your stopword removal by:\n\n1. Using only one lexicon: \n\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   stop_words %>% filter(lexicon == \"snowball\")\n   ```\n   \n   ::: {.cell-output .cell-output-stdout}\n   \n   ```\n   # A tibble: 174 × 2\n      word      lexicon \n      <chr>     <chr>   \n    1 i         snowball\n    2 me        snowball\n    3 my        snowball\n    4 myself    snowball\n    5 we        snowball\n    6 our       snowball\n    7 ours      snowball\n    8 ourselves snowball\n    9 you       snowball\n   10 your      snowball\n   # ℹ 164 more rows\n   ```\n   \n   \n   :::\n   :::\n\n\n\n\n2. Adding or removing words from the list:\n\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   custom_stop_words <- stop_words %>%\n     add_row(word = \"custom_word\", lexicon = \"custom\")\n   ```\n   :::\n\n\n\n\n3. Creating your own domain-specific stop word list based on your corpus and research needs.\n:::\n\nRemember, the goal of stopword removal is to reduce noise in the data and focus on meaningful content. However, what constitutes \"meaningful\" can vary depending on your specific analysis goals and the nature of your text data.\n\n## Stemming and Lemmatization\n\nStemming and lemmatization are text normalization techniques used to reduce words to their base or root form. This process helps in grouping together different inflected forms of a word, which can be useful for various text analysis tasks.\n\n### What are Stemming and Lemmatization?\n\n1. **Stemming** is a simple, rule-based process of removing the ends of words (suffixes) to reduce them to their base form. For example:\n\n   - \"running\" → \"run\"\n   - \"cats\" → \"cat\"\n   - \"better\" → \"better\" (remains unchanged)\n\n2. **Lemmatization** is a more sophisticated approach that considers the context and part of speech of a word to determine its base form (lemma). For example:\n\n   - \"running\" → \"run\"\n   - \"better\" → \"good\"\n   - \"are\" → \"be\"\n\n### When to Use Them?\n\n- Use **stemming** when:\n  * You need a quick, computationally efficient method.\n  * The meaning of the stem is clear enough for your analysis.\n  * You're working with a large dataset and processing speed is crucial.\n\n- Use **lemmatization** when:\n  * You need more accurate, dictionary-based results.\n  * The precise meaning of the word is important for your analysis.\n  * You have the computational resources to handle a more intensive process.\n\n### Applying Stemming\n\nIn this example, we'll apply stemming using the SnowballC package, which implements the Porter stemming algorithm:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_load(SnowballC)\n\nstemmed_data <- data_without_stopwords %>%\n  mutate(stem = wordStem(word))\n\nprint(stemmed_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 44 × 2\n   word     stem  \n   <chr>    <chr> \n 1 quick    quick \n 2 brown    brown \n 3 fox      fox   \n 4 jumps    jump  \n 5 lazy     lazi  \n 6 dog      dog   \n 7 data     data  \n 8 science  scienc\n 9 meets    meet  \n10 cultural cultur\n# ℹ 34 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.callout-tip}\n## Lemmatization Alternative\n\nFor lemmatization, you can use the `textstem` package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_load(textstem)\n\nlemmatized_data <- data_without_stopwords %>%\n  mutate(lemma = lemmatize_words(word))\n\nprint(lemmatized_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 44 × 2\n   word     lemma   \n   <chr>    <chr>   \n 1 quick    quick   \n 2 brown    brown   \n 3 fox      fox     \n 4 jumps    jump    \n 5 lazy     lazy    \n 6 dog      dog     \n 7 data     datum   \n 8 science  science \n 9 meets    meet    \n10 cultural cultural\n# ℹ 34 more rows\n```\n\n\n:::\n:::\n\n\n\n\nLemmatization often produces more intuitive results but can be slower for large datasets.\n:::\n\n### Stemming vs. Lemmatization\n\nIn humanities research, the choice between stemming and lemmatization can significantly impact your analysis:\n\n1. **Preserving Meaning**: Lemmatization often preserves meaning better, which can be crucial for literary analysis or historical research.\n\n2. **Handling Irregular Forms**: Lemmatization is better at handling irregular forms (e.g., \"better\" → \"good\"), which is common in many languages and especially important in analyzing older texts.\n\n3. **Computational Resources**: If you're working with vast corpora, stemming might be more practical due to its speed.\n\n4. **Language Specificity**: For languages other than English, or for multilingual corpora, lemmatization often provides better results as it's more adaptable to language-specific rules.\n\n5. **Research Questions**: Consider your research questions. If distinguishing between, say, \"democratic\" and \"democracy\" is crucial, lemmatization might be more appropriate.\n\nRemember, the choice of preprocessing steps, including whether to use stemming or lemmatization, should be guided by your specific research questions and the nature of your text data. It's often helpful to experiment with different approaches and see which yields the most meaningful results for your particular study.\n\n## Hands-On Coding 💻\n\nNow, let's apply our text preprocessing skills to a real dataset. We'll use the answers submitted by you in response to the \"what is digital humanities? write down three keywords that come to mind\" question. Our goal is to clean and prepare this text data for analysis.\n\nFirst, let's download the dataset:\n\n[Download DH Keywords dataset](data/dh_keywords.csv)\n\nSave it in the folder name `data` in your working directory. \n\nWe can then load the csv file into RStudio:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_load(tidyverse)\n\n# Load the dataset\ndh_keywords <- read_csv(\"data/dh_keywords.csv\", col_names = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 180 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): X1\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(dh_keywords) <- \"keyword\"\n\n# Display the first few rows\nhead(dh_keywords)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n  keyword\n  <chr>  \n1 math   \n2 chatgpt\n3 AI     \n4 ai     \n5 AI     \n6 ai     \n```\n\n\n:::\n:::\n\n\n\n\n\n#### Exercise 1: Planning Preprocessing Steps\n\nBefore we start coding, let's think about what steps we need to take to clean and standardize our DH keywords dataset, and in what order these steps should be performed.\n\nLook at the first few rows of our dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(dh_keywords)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n  keyword\n  <chr>  \n1 math   \n2 chatgpt\n3 AI     \n4 ai     \n5 AI     \n6 ai     \n```\n\n\n:::\n:::\n\n\n\n\nNow, consider the following questions:\n\n1. What issues do you notice in the data that need to be addressed?\n2. What preprocessing steps would you take to clean this data?\n3. In what order should these steps be performed, and why?\n\n<div id=\"hint-plan-1\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint 1\nNotice that many rows contain more than one word. We may need to either separate rows so that there is only one entry per row or tokenize the data so that there is only one word per row.\n:::\n</div>\n\n<div id=\"hint-plan-2\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint 2\nAfter tokenization, consider issues like inconsistent capitalization, punctuation, extra whitespace, and potentially empty entries.\n:::\n</div>\n\n\n<script>\ncreateProgressiveHints('hint-plan', 2);\n</script>\n\n<div id=\"solution-plan\" style=\"display: none;\">\n\nA possible preprocessing plan could be:\n\n1. Tokenize the data so that we have one word per row.\n   - This ensures we're working with individual words.\n2. Convert all text to lowercase\n   - This ensures consistency in our text data\n3. Remove all punctuation\n   - This focuses our analysis on the words themselves\n4. Trim leading and trailing whitespace and replace multiple spaces with a single space\n   - This cleans up any formatting inconsistencies\n5. Remove stop words\n   - This eliminates common words that don't carry much meaning in analysis\n6. Remove any empty entries that might result from the above steps\n   - This ensures we're only working with meaningful data\n\nThis order ensures that we first isolate individual keywords, then standardize the text (lowercase) before removing elements (punctuation), clean up spacing issues, and finally remove any entries that became empty as a result of our preprocessing.\n\n</div>\n\n<script>\ncreateToggleSection('solution-button-plan', 'solution-plan', 'Show Possible Plan');\n</script>\n\n#### Exercise 2: Implementing the Preprocessing Steps\n\nNow that we have a plan, let's implement these preprocessing steps in R. Use the `tidyr`, `dplyr`, and `stringr` packages to clean the `dh_keywords` dataset according to your plan.\n\n<div id=\"hint-implement-1\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint 1\nUse `unnest_tokens()` from tidytext to tokenize the data into individual words. Remember, by default this will take care of the lowercasing and punctuation removal for us.\n:::\n</div>\n\n<div id=\"hint-implement-2\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint 2\nUse `anti_join()` with a stop words dataset to remove common words.\n:::\n</div>\n\n<div id=\"hint-implement-3\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint 3\nUse `filter()` with `nchar()` to remove empty entries.\n:::\n</div>\n\n<script>\ncreateProgressiveHints('hint-implement', 3);\n</script>\n\n<div id=\"template-implement\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_load(tidytext)\n\ndh_keywords_clean <- dh_keywords %>%\n  unnest_tokens(output = word, input = keyword) %>%\n  anti_join(stop_words) %>%\n  filter(_ > _)\n\n# Display the final result and the number of rows\nprint(dh_keywords_clean)\npaste(\"Number of keywords after preprocessing:\", nrow(dh_keywords_clean))\n```\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('template-button-implement', 'template-implement', 'Show Template');\n</script>\n\n<div id=\"solution-implement\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_load(tidytext)\n\ndh_keywords_clean <- dh_keywords %>%\n  unnest_tokens(output = word, input = keyword) %>%\n  anti_join(stop_words) %>%\n  filter(nchar(word) > 0)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(word)`\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display the final result and the number of rows\nprint(dh_keywords_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 405 × 1\n   word   \n   <chr>  \n 1 math   \n 2 chatgpt\n 3 ai     \n 4 ai     \n 5 ai     \n 6 ai     \n 7 coding \n 8 ai     \n 9 ai     \n10 data   \n# ℹ 395 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\npaste(\"Number of keywords after preprocessing:\", nrow(dh_keywords_clean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Number of keywords after preprocessing: 405\"\n```\n\n\n:::\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('solution-button-implement', 'solution-implement', 'Show Solution');\n</script>\n\n\n\n\n# Text Representation 🧮\n\nAfter preprocessing our text data, the next crucial step is to transform it into a format that machines can understand and analyze. This process is called text representation.\n\n::: {.callout-note}\n## Key Concepts in Text Representation\n\n1. **Count-based methods**:\n\n   - Bag-of-words representation: Represents text as an unordered collection of words, counting their occurrences.\n   - Term frequency-inverse document frequency (TF-IDF): Reflects word importance in a document relative to a corpus.\n\n2. **Context-based methods**:\n\n   - N-grams analysis: Examines sequences of N words to capture local context.\n   - Co-occurrence matrix: Represents how often words appear together within a certain distance.\n   - Word embeddings (e.g., Word2Vec, GloVe): Dense vector representations capturing semantic relationships.\n:::\n\nLet's first focus on one of the most fundamental and widely used text representation methods: the Bag-of-Words (BoW) model.\n\n## Bag-of-Words (BoW)\n\nThe Bag-of-Words model is a simple yet powerful way to represent text data. It treats each document (unit of analysis) as an unordered collection of words, disregarding grammar and word order but keeping track of word frequency.\n![](images/BOW.png)\n\n::: {.callout-tip}\n## Key Features of Bag-of-Words\n\n- Counts how many times each word appears in a text or document\n- Creates a list of all unique words used across all documents\n- Treats each unique word as a separate piece of information\n- Ignores word order or grammar and only represent how often words appear\n\nNote: In text analysis, we often use the term \"document\" to refer to any unit of text we're analyzing. This could be a book, an article, a tweet, or even a single sentence, depending on our research goals.\n:::\n\nLet's look at a simple example to understand how BoW works:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidytext)\nlibrary(dplyr)\n\n# Sample documents\ndocs <- c(\n  \"The cat sat on the mat\",\n  \"The dog chased the cat\",\n  \"The mat was red\"\n)\n\n# Create a tibble\ntext_df <- tibble(doc_id = 1:3, text = docs)\n\n# Tokenize and count words\nbow_representation <- text_df %>%\n  unnest_tokens(word, text) %>%\n  count(doc_id, word, sort = TRUE)\n\n# Display the BoW representation\nprint(bow_representation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n   doc_id word       n\n    <int> <chr>  <int>\n 1      1 the        2\n 2      2 the        2\n 3      1 cat        1\n 4      1 mat        1\n 5      1 on         1\n 6      1 sat        1\n 7      2 cat        1\n 8      2 chased     1\n 9      2 dog        1\n10      3 mat        1\n11      3 red        1\n12      3 the        1\n13      3 was        1\n```\n\n\n:::\n:::\n\n\n\n\nIn this representation:\n- Each row represents a word in a specific document\n- 'doc_id' identifies the document\n- 'word' is the tokenized word\n- 'n' represents the count of that word in the document\n\nThis BoW representation allows us to see the frequency of each word in each document, forming the basis for various text analysis techniques.\n\n\n::: {.callout-tip}\n## `count()` function\n\nThe `count()` function from `dplyr` is a powerful tool for summarizing data:\n\n- Purpose: Counts the number of rows with each unique combination of variables.\n- Basic usage: `count(data, variable_to_count)`\n- Key features:\n  * Automatically arranges results in descending order with `sort = TRUE`\n  * Can count multiple variables at once: `count(var1, var2)`\n  * Allows custom naming of the count column: `count(var, name = \"my_count\")`\n- Tip: Combine with `slice_head()` or `slice_max()` to focus on top results\n:::\n\n::: {.callout-note}\n## Advantages and Limitations of BoW\n\nAdvantages:\n- Simple and intuitive\n- Computationally efficient\n- Effective for many text classification tasks\n\nLimitations:\n- Loses word order information\n- Can result in high-dimensional, sparse vectors\n- Doesn't capture semantics or context\n- Ignores word relationships and meanings\n:::\n\nDespite its limitations, the Bag-of-Words model remains a fundamental technique in text analysis, often serving as a starting point for more complex analyses or as a baseline for comparing more sophisticated models.\n\n\nNow, let's generate the BoW representation of our preprocessed DH Keywords data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_frequencies <- dh_keywords_clean %>%\n  count(word, sort = TRUE)\n\nword_frequencies\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 120 × 2\n   word            n\n   <chr>       <int>\n 1 data           61\n 2 ai             50\n 3 coding         34\n 4 analysis       18\n 5 technology     17\n 6 science        14\n 7 computer       13\n 8 programming    11\n 9 statistics      9\n10 ethics          7\n# ℹ 110 more rows\n```\n\n\n:::\n:::\n\n\n\n\n# Visualizing Text Data 📊\n\nNow that we have transformed our keywords into numbers, how do we visualize them?\n\n## Word Clouds\n\nWord clouds are a popular way to visualize the most frequent words in a text, with the size of each word proportional to its frequency.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_load(wordcloud2)\n\n# Create a word cloud\nwordcloud2(data = word_frequencies %>% slice_head(n = 50), size = 0.5)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"wordcloud2 html-widget html-fill-item\" id=\"htmlwidget-c6a91a1a4e385e75f57c\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c6a91a1a4e385e75f57c\">{\"x\":{\"word\":[\"data\",\"ai\",\"coding\",\"analysis\",\"technology\",\"science\",\"computer\",\"programming\",\"statistics\",\"ethics\",\"digital\",\"research\",\"social\",\"chatgpt\",\"code\",\"human\",\"humanities\",\"text\",\"tools\",\"artificial\",\"culture\",\"disciplinary\",\"innovative\",\"interdisciplinary\",\"programing\",\"quantitative\",\"society\",\"complicated\",\"corpus\",\"creativity\",\"difficult\",\"humanity\",\"intelligence\",\"inter\",\"linguistics\",\"multimedia\",\"network\",\"processing\",\"program\",\"quantative\",\"tech\",\"video\",\"abstract\",\"advanced\",\"analysing\",\"analytical\",\"applying\",\"auxiliary\",\"based\",\"care\"],\"freq\":[61,50,34,18,17,14,13,11,9,7,5,5,5,4,4,4,4,4,4,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1],\"fontFamily\":\"Segoe UI\",\"fontWeight\":\"bold\",\"color\":\"random-dark\",\"minSize\":0,\"weightFactor\":1.475409836065574,\"backgroundColor\":\"white\",\"gridSize\":0,\"minRotation\":-0.7853981633974483,\"maxRotation\":0.7853981633974483,\"shuffle\":true,\"rotateRatio\":0.4,\"shape\":\"circle\",\"ellipticity\":0.65,\"figBase64\":null,\"hover\":null},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el,x){\\n                        console.log(123);\\n                        if(!iii){\\n                          window.location.reload();\\n                          iii = False;\\n\\n                        }\\n  }\",\"data\":null}]}}</script>\n```\n\n:::\n:::\n\n\n\n\nAlternatively, you can also use the following code to tweak the style of the plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make it more aesthetically pleasing\np_load(RColorBrewer)\n\n# Create a color palette\ncolor_palette <- brewer.pal(8, \"Dark2\")\n\nwordcloud2(\n  data = word_frequencies %>% slice_head(n = 50),  # Use top 50 most frequent words\n  size = 0.6,                    # Increase text size for better readability\n  color = rep_len(color_palette, 50),  # Apply color palette to words\n  backgroundColor = \"white\",     # Set background color to white\n  rotateRatio = 0.3,             # Reduce word rotation for cleaner look\n  shape = \"circle\",              # Set overall shape of the word cloud\n  fontFamily = \"Arial\",          # Use Arial font for consistency\n  fontWeight = \"bold\",           # Make text bold for emphasis\n  minRotation = -pi/6,           # Set minimum rotation angle (30 degrees left)\n  maxRotation = pi/6             # Set maximum rotation angle (30 degrees right)\n)\n```\n:::\n\n\n\n\n![](images/wordcloud2.png)\n\n## Bar Charts of Word Frequency\n\nBar charts offer a more precise way to visualize word frequencies, especially for comparing the most common words.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_load(ggplot2)\n\nword_frequencies %>%\n  slice_head(n = 20) %>%\n  ggplot(aes(x = reorder(word, n), y = n)) +\n  geom_col(fill=\"Steelblue\") + # Color all bars in blue\n  coord_flip() +\n  theme_minimal()+\n  theme(legend.position = \"none\") +\n  labs(x = \"Word\", y = \"Frequency\", title = \"Top 10 Most Frequent DH Keywords\")\n```\n\n::: {.cell-output-display}\n![](06-qta_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n\nNow, what problem do you notice in the above analysis? You may notice that the top keywords/words are perhaps too decontexualized. For instance, the \"science\" and \"computer\" entries are perhaps originally \"computer science\". \n\nHow do we add a bit more contextual information to this?\n\n## N-grams\n\nN-grams are sequences of n items from a given text. These items can be words, characters, or even syllables. N-grams help capture phrases and word associations, providing context that single words might miss. This approach can address some of the limitations we observed with the Bag-of-Words model, particularly its inability to preserve word order and capture multi-word concepts.\n\n![](images/ngrams.png)\n\n::: {.callout-note}\n## Understanding N-grams\n\n- Unigrams (n=1): Single words, e.g., \"digital\", \"humanities\"\n- Bigrams (n=2): Two consecutive words, e.g., \"digital humanities\"\n- Trigrams (n=3): Three consecutive words, e.g., \"natural language processing\"\n- And so on for larger n...\n\nN-grams preserve word order, which can be crucial for understanding meaning and context in text analysis.\n:::\n\nBy using n-grams, we can potentially recover some of the multi-word terms that were split in our earlier analysis, such as \"computer science\" or \"artificial intelligence\".\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbigrams <- dh_keywords %>%\n  unnest_ngrams(bigram, keyword, n = 2)\n\n# Display the most common bigrams\nbigrams %>%\n  count(bigram, sort = TRUE) %>%\n  filter(nchar(bigram) > 0) %>%\n  head(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   bigram               n\n   <chr>            <int>\n 1 ai coding            6\n 2 coding data          6\n 3 data ai              6\n 4 data coding          6\n 5 computer science     5\n 6 data analysis        5\n 7 ai data              4\n 8 social science       4\n 9 analysis coding      3\n10 coding analysis      3\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.callout-note}\n## Considering Multiple N-gram Sizes\n\nResearchers often use a combination of n-gram sizes (e.g., unigrams, bigrams, and trigrams) for several reasons:\n\n1. **Comprehensive Coverage**: Different n-gram sizes capture different aspects of language.\n2. **Balancing Specificity and Generality**: Larger n-grams are more specific but occur less frequently.\n3. **Handling Varied Phrases**: Some meaningful phrases are two words, others three or more.\n\nHowever, using multiple n-gram sizes also has challenges:\n\n- **Increased Complexity**: More data to process and analyze.\n- **Overlapping Information**: Bigrams and trigrams may contain redundant information.\n- **Sparse Data**: Larger n-grams may occur very infrequently, leading to sparse data issues.\n\nThe choice depends on your research questions and the nature of your texts.\n:::\n\nHere's an example of how we might generate n-grams of different sizes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_load(tidytext)\n\nmixed_ngrams = dh_keywords %>%\n  unnest_ngrams(ngrams, keyword, n = 3, n_min = 1)\n\n\n# Display the top 5 of each\nmixed_ngrams %>%\n  count(ngrams, sort = TRUE) %>%\n  mutate(keyword_len = str_count(ngrams, \"\\\\S+\")) %>%\n  group_by(keyword_len) %>%\n  slice_max(n, n = 5) \n```\n:::\n\n\n\n\nThis approach allows us to see the most common phrases of different lengths in our dataset, providing a more comprehensive view of the language used in digital humanities keywords.\n\n\n## Learning Check 🏁\n\n<div id=\"quiz-text-analysis\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What is tokenization in text analysis?\",\n      options: [\n        \"The process of removing punctuation from text\",\n        \"Breaking down text into smaller units like words or sentences\",\n        \"Converting all text to lowercase\",\n        \"Removing common words from text\"\n      ]\n    },\n    {\n      text: \"What are stopwords in text analysis?\",\n      options: [\n        \"Words that appear most frequently in a text\",\n        \"Words that are misspelled in a text\",\n        \"Common words like 'the', 'is', 'at' that are often removed from analysis\",\n        \"Words that are unique to a specific text\"\n      ]\n    },\n    {\n      text: \"In a word cloud visualization, what does the size of a word typically represent?\",\n      options: [\n        \"The length of the word\",\n        \"The alphabetical order of the word\",\n        \"The frequency of the word in the text\",\n        \"The sentiment of the word\"\n      ]\n    },\n    {\n      text: \"What is the primary purpose of the Bag-of-Words (BoW) model in text representation?\",\n      options: [\n        \"To preserve the grammatical structure of sentences\",\n        \"To represent text as an unordered collection of word frequencies\",\n        \"To analyze the sentiment of each word in a text\",\n        \"To identify the main topics in a document\"\n      ]\n    },\n    {\n      text: \"Which of the following is NOT a limitation of the Bag-of-Words model?\",\n      options: [\n        \"It loses word order information\",\n        \"It doesn't capture context or semantics\",\n        \"It results in high-dimensional, sparse vectors\",\n        \"It's computationally intensive and slow to process\"\n      ]\n    }\n  ],\n  answers: [1, 2, 2, 1, 3]\n}, \"quiz-text-analysis\");\n</script>\n\nThis learning check will help reinforce the key concepts covered in this section on basic text analysis and visualization techniques.\n\n\n\n\n# Conclusion\n\n::: {.callout-note}\n## Key Takeaways\nIn this chapter, we've covered:\n\n- The basics of Quantitative Text Analysis (QTA) and its applications in Digital Humanities\n- Essential text preprocessing techniques including tokenization, noise removal, and stopword removal\n- Text representation methods, focusing on the Bag-of-Words model and n-grams\n- Visualization techniques for text data, including word clouds and frequency bar charts\n- Hands-on application of these concepts to analyze Digital Humanities keywords\n:::\n\nThese foundational skills in Quantitative Text Analysis provide a powerful toolkit for exploring and analyzing textual data in Digital Humanities. As we progress in our journey, we'll build upon these concepts to perform more sophisticated text analysis techniques and derive deeper insights from textual data.\n\n::: {.topic-flow}\n::: {.topic-box .highlight-blue}\nQTA Basics\n:::\n::: {.topic-box .highlight-green}\nText Preprocessing\n:::\n::: {.topic-box .highlight-yellow}\nText Representation\n:::\n::: {.topic-box .highlight-pink}\nText Visualization\n:::\n:::\n\n\n\n<iframe src=\"float_traffic.html\" width=\"200px\" height=\"200px\" style=\"border:none; position: fixed; bottom: 10px; right: 10px; z-index: 9999;\" scrolling=\"no\"></iframe>\n\n<iframe src=\"float_dash.html\" width=\"200px\" height=\"200px\" style=\"border:none; position: fixed; bottom: 10px; left: 10px; z-index: 9999;\" scrolling=\"no\"></iframe>",
    "supporting": [
      "06-qta_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/wordcloud2-0.0.1/wordcloud.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/wordcloud2-0.0.1/wordcloud2-all.js\"></script>\n<script src=\"../site_libs/wordcloud2-0.0.1/hover.js\"></script>\n<script src=\"../site_libs/wordcloud2-binding-0.2.1/wordcloud2.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}