{
  "hash": "efe8dbefacf50debafaf75e6bec743fd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"§5 Spinning the Reels 🎰\"\nsubtitle: \"Introduction to Tidyverse\"\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-link: true\n    highlight-style: github\n    include-in-header:\n      text: |\n        <script src=\"quiz.js\"></script>\n        <script src=\"content-switch.js\"></script>\nfilters: \n - collapse-callout.lua\nexecute:\n  freeze: auto\n---\n\n\n\n\n\n\n\n\nWelcome to the exciting world of tidyverse! In this chapter, we'll build on our knowledge of R by exploring the tidyverse, a collection of R packages designed for data science. We'll create a virtual slot machine to demonstrate the power and simplicity of tidyverse functions.\n\n::: {.callout-note}\n## Learning Objectives\n- 📦 Understand the basics of tidyverse and its core packages\n- 🔄 Learn to manipulate data with dplyr functions\n- 📊 Visualize data using ggplot2\n- 🎰 Build a virtual slot machine using tidyverse functions\n:::\n\n# Introduction to Tidyverse 📦\n\nTidyverse is a collection of R packages that work together harmoniously for data manipulation, exploration, and visualization. \n\n::: {.callout-tip}\n## Tidyverse vs. Base R?\n\nYou might wonder why we're learning Tidyverse when R already has built-in functions (known as Base R). Here's why:\n\n1. Readability: Tidyverse code is often easier to read and understand, especially for beginners. It uses a consistent style and vocabulary across its packages.\n\n2. Workflow: Tidyverse functions work well together, creating a smooth \"pipeline\" for data analysis. This makes it easier to perform complex operations step-by-step.\n\n3. Modern approach: Tidyverse incorporates more recent developments in R programming, addressing some limitations of Base R.\n\n4. Consistency: Tidyverse functions behave predictably, reducing unexpected outcomes that sometimes occur with Base R functions.\n\n5. Community support: Tidyverse has a large, active community, which means more resources, tutorials, and help are available online.\n\nWhile Base R is still important and powerful, Tidyverse provides a more accessible entry point for beginners and a efficient toolkit for data analysis tasks common in Digital Humanities.\n\nRemember, you're not choosing one over the other permanently. As you grow more comfortable with R, you'll likely use both Tidyverse and Base R, selecting the best tool for each specific task.\n:::\n\nLet's start by loading the tidyverse:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('tidyverse')\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\nThe core tidyverse includes packages like dplyr (for data manipulation) and ggplot2 (for data visualization).\n\n![](images/tidyverse.png)\n\n::: {.callout-note}\n## Core Tidyverse Packages\nThe core tidyverse includes several packages, each with a specific purpose:\n\n1. dplyr: for data manipulation (like sorting, filtering, and summarizing data)\n2. ggplot2: for data visualization (creating graphs and charts)\n3. tidyr: for tidying data (organizing data into a consistent format)\n4. readr: for reading rectangular data (importing data from files)\n5. purrr: for functional programming (applying functions to data)\n6. tibble: for modern data frames (an enhanced version of R's traditional data structure)\n\nFor routine data analysis tasks, we mainly use dplyr and ggplot2, which is what we will focus on in this chapter.\n:::\n\n\n\n\n## Learning Check 🏁 \n\n<div id=\"quiz1\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What is tidyverse?\",\n      options: [\n        \"A single R package\",\n        \"A collection of R packages for data science\",\n        \"A programming language\",\n        \"A type of data structure\"\n      ]\n    },\n    {\n      text: \"Which of the following is NOT a core tidyverse package?\",\n      options: [\n        \"dplyr\",\n        \"ggplot2\",\n        \"tidyr\",\n        \"base\"\n      ]\n    }\n  ],\n  answers: [1, 3]\n}, \"quiz1\");\n</script>\n\n# Data Manipulation with dplyr 🔄\n\nLet's look at a *mock* book dataset again, but this time using dplyr functions:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the books dataset\nbooks <- tibble(\n  title = c(\"1984\", \"Pride and Prejudice\", \"The Great Gatsby\", \"To Kill a Mockingbird\", \"The Catcher in the Rye\"),\n  author = c(\"Orwell\", \"Austen\", \"Fitzgerald\", \"Lee\", \"Salinger\"),\n  year = c(1949, 1813, 1925, 1960, 1951),\n  genre = c(\"Dystopian\", \"Romance\", \"Modernist\", \"Coming-of-age\", \"Coming-of-age\"),\n  pages = c(328, 432, 180, 281, 234)\n)\n\n# View the books\nbooks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  title                  author      year genre         pages\n  <chr>                  <chr>      <dbl> <chr>         <dbl>\n1 1984                   Orwell      1949 Dystopian       328\n2 Pride and Prejudice    Austen      1813 Romance         432\n3 The Great Gatsby       Fitzgerald  1925 Modernist       180\n4 To Kill a Mockingbird  Lee         1960 Coming-of-age   281\n5 The Catcher in the Rye Salinger    1951 Coming-of-age   234\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n::: {.callout-tip}\n## Tibbles vs. Data Frames\nYou might notice we used `tibble()` instead of `data.frame()`. Tibbles are modern data frames that are part of the tidyverse. They have some advantages over traditional data frames:\n\n1. They have a cleaner print method\n2. They don't change column types\n3. They don't create row names\n4. They warn you when a column doesn't exist\n\nFor most purpose you can use them interchangeably with data frames, but the Tidyverse version is often easier and more inuitive to use and we would recommend using Tidyverse versions over Base R versions. \n\nBelow are more examples of Tidyverse alternaties to Base R (the built-in functions of R):\n\n- Reading data: `read_csv()` (Tidyverse) vs. `read.csv()` (Base R)\n- Filtering data: `filter()` (Tidyverse) vs. `subset()` (Base R)\n- Plotting: `ggplot()` (Tidyverse) vs. `plot()` (Base R)\n- Sorting: `arrange()` (Tidyverse) vs. `order()` or `sort()` (Base R)\n\n:::\n\nNow, let's explore some key dplyr functions:\n\n::: {.callout-note}\n## Core Functions in `dplyr`\n\ndplyr provides a set of powerful functions for manipulating data:\n\n1. `filter()`: Subset rows based on conditions. \n   This function allows you to keep only the data rows that meet specific criteria, like selecting books published after a certain year.\n\n2. `select()`: Choose specific columns. \n   Use this when you want to focus on particular variables in your dataset, similar to picking certain columns in a spreadsheet.\n\n3. `mutate()`: Add new variables or modify existing ones. \n   This function lets you create new columns based on calculations from existing data, or change values in current columns.\n\n4. `arrange()`: Sort rows. \n   When you need to order your data based on one or more variables, such as sorting books by publication date, use this function.\n\n5. `summarise()`: Compute summary statistics. \n   This function is useful for calculating things like averages, totals, or counts across your entire dataset or within groups.\n\n6. `group_by()`: Group data for operations. \n   Use this to divide your data into groups before applying other functions, allowing you to perform calculations within each group separately.\n\n7. `join()`: Combine data from multiple tables. \n   When your data is split across different tables or datasets, this function helps you merge them together based on common variables.\n\nThese functions are designed to work together, allowing you to perform complex data manipulations step by step. As you practice, you'll find yourself combining these functions to answer increasingly sophisticated questions about your data.\n\n#### Cheat Sheet {.unnumbered}\n\nFor quick reference, here's a handy cheat sheet summarizing the key dplyr functions. Most tidyverse packages have corresponding cheat sheets. Just google the package name + cheat sheet and download it yourself. \n\n[Dplyr Cheet Sheet](https://nyu-cdsc.github.io/learningr/assets/data-transformation.pdf)\n\n:::\n\n## `filter()`: Subset Rows\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find all books published after 1900\nbooks %>% \nfilter(year > 1900)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  title                  author      year genre         pages\n  <chr>                  <chr>      <dbl> <chr>         <dbl>\n1 1984                   Orwell      1949 Dystopian       328\n2 The Great Gatsby       Fitzgerald  1925 Modernist       180\n3 To Kill a Mockingbird  Lee         1960 Coming-of-age   281\n4 The Catcher in the Rye Salinger    1951 Coming-of-age   234\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n::: {.callout-note}\n## The Pipe Operator `%>%`\nThe `%>%` operator is called the \"pipe\" operator. It takes the output of one function and passes it as the first argument to the next function. This allows us to chain multiple operations together, making our code more readable and intuitive.\n\nFor example, `books %>% filter(year > 1900)` can be read as \"Take the books data, then filter it to keep only books published after 1900\".\n:::\n\n\n## `select()`: Choose Columns\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select only title and author columns\nbooks %>%\nselect(title, author)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  title                  author    \n  <chr>                  <chr>     \n1 1984                   Orwell    \n2 Pride and Prejudice    Austen    \n3 The Great Gatsby       Fitzgerald\n4 To Kill a Mockingbird  Lee       \n5 The Catcher in the Rye Salinger  \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n## `mutate()`: Add New Variables\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a new column for the book's age\nbooks %>%\nmutate(age = 2024 - year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  title                  author      year genre         pages   age\n  <chr>                  <chr>      <dbl> <chr>         <dbl> <dbl>\n1 1984                   Orwell      1949 Dystopian       328    75\n2 Pride and Prejudice    Austen      1813 Romance         432   211\n3 The Great Gatsby       Fitzgerald  1925 Modernist       180    99\n4 To Kill a Mockingbird  Lee         1960 Coming-of-age   281    64\n5 The Catcher in the Rye Salinger    1951 Coming-of-age   234    73\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n## `arrange()`: Sort Rows\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort books by year, oldest first\nbooks %>%\narrange(year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  title                  author      year genre         pages\n  <chr>                  <chr>      <dbl> <chr>         <dbl>\n1 Pride and Prejudice    Austen      1813 Romance         432\n2 The Great Gatsby       Fitzgerald  1925 Modernist       180\n3 1984                   Orwell      1949 Dystopian       328\n4 The Catcher in the Rye Salinger    1951 Coming-of-age   234\n5 To Kill a Mockingbird  Lee         1960 Coming-of-age   281\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n::: {.callout-tip}\n#### Comparing `arrange()` and `order()`\nIn Tidyverse, we use `arrange()` to sort data frames, which is often more intuitive and easier to use with multiple columns. In Base R, you typically use `order()` within square brackets or `sort()` for vectors.\n  \nFor example:\n\nTidyverse: `data %>% arrange(column_name)`\n\nBase R: `data[order(data$column_name), ]`\n\nThe Tidyverse method is more readable, especially when sorting by multiple columns or in descending order.\n\n:::\n\n## `summarise()`: Summarize Data\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average number of pages\nbooks %>%\nsummarise(avg_pages = mean(pages))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  avg_pages\n      <dbl>\n1       291\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n## `group_by()`: Group Data for Operations\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Average pages by genre\nbooks %>%\ngroup_by(genre) %>%\nsummarise(avg_pages = mean(pages))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  genre         avg_pages\n  <chr>             <dbl>\n1 Coming-of-age      258.\n2 Dystopian          328 \n3 Modernist          180 \n4 Romance            432 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## Learning Check 🏁\n\n<div id=\"quiz-dplyr\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"Which dplyr function would you use to select specific columns from a dataset?\",\n      options: [\n        \"filter()\",\n        \"select()\",\n        \"mutate()\",\n        \"arrange()\"\n      ]\n    },\n    {\n      text: \"If you want to create a new column based on existing data, which function should you use?\",\n      options: [\n        \"summarise()\",\n        \"group_by()\",\n        \"mutate()\",\n        \"filter()\"\n      ]\n    },\n    {\n      text: \"Which function allows you to perform operations on grouped data?\",\n      options: [\n        \"arrange()\",\n        \"select()\",\n        \"filter()\",\n        \"group_by()\"\n      ]\n    },\n    {\n      text: \"To sort a dataset based on one or more variables, which dplyr function would you use?\",\n      options: [\n        \"arrange()\",\n        \"sort()\",\n        \"order()\",\n        \"filter()\"\n      ]\n    }\n  ],\n  answers: [1, 2, 3, 0]\n}, \"quiz-dplyr\");\n</script>\n\n\n\n## Hands-On Coding 💻\n\nTry the following exercises:\n\n1. Use `filter()` to find all books written by Austen or Orwell.\n2. Use `arrange()` to sort the books by number of pages, from longest to shortest.\n3. Use `mutate()` to add a new column called `words`, assuming an average of 250 words per page.\n4. Use `group_by()` and `summarise()` to find the earliest publication year for each genre.\n\n<div id=\"hidden-content1\" style=\"display: none;\">\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Books by Austen or Orwell\nbooks %>%\nfilter(author %in% c(\"Austen\", \"Orwell\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  title               author  year genre     pages\n  <chr>               <chr>  <dbl> <chr>     <dbl>\n1 1984                Orwell  1949 Dystopian   328\n2 Pride and Prejudice Austen  1813 Romance     432\n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. Sort by pages, longest to shortest\nbooks %>%\narrange(desc(pages))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  title                  author      year genre         pages\n  <chr>                  <chr>      <dbl> <chr>         <dbl>\n1 Pride and Prejudice    Austen      1813 Romance         432\n2 1984                   Orwell      1949 Dystopian       328\n3 To Kill a Mockingbird  Lee         1960 Coming-of-age   281\n4 The Catcher in the Rye Salinger    1951 Coming-of-age   234\n5 The Great Gatsby       Fitzgerald  1925 Modernist       180\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. Add words column\nbooks %>%\nmutate(words = pages*250)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  title                  author      year genre         pages  words\n  <chr>                  <chr>      <dbl> <chr>         <dbl>  <dbl>\n1 1984                   Orwell      1949 Dystopian       328  82000\n2 Pride and Prejudice    Austen      1813 Romance         432 108000\n3 The Great Gatsby       Fitzgerald  1925 Modernist       180  45000\n4 To Kill a Mockingbird  Lee         1960 Coming-of-age   281  70250\n5 The Catcher in the Rye Salinger    1951 Coming-of-age   234  58500\n```\n\n\n:::\n\n```{.r .cell-code}\n# 4. Earliest publication year by genre\nbooks %>%\ngroup_by(genre) %>%\nsummarise(earliest_year = min(year))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  genre         earliest_year\n  <chr>                 <dbl>\n1 Coming-of-age          1951\n2 Dystopian              1949\n3 Modernist              1925\n4 Romance                1813\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('button1', 'hidden-content1');\n</script>\n\n# Data Visualization with ggplot2 📊\n\nggplot2 is a powerful package for creating beautiful and informative visualizations, especially useful for exploring data. \n\n\n## Expand the Books Dataset\n\nLet's expand the books dataset to include some more variables for visualization purposes:\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnovels <- books %>%\n  mutate(\n    words = pages*250, # Estimating word count based on pages\n    characters = c(30, 25, 15, 20, 10), # Number of named characters (estimated)\n    rating = c(4.2, 4.5, 4.0, 4.3, 4.1), # Modern reader ratings (out of 5)\n    male_chars = c(20, 10, 10, 12, 7), # Number of male characters (estimated)\n    female_chars = c(10, 15, 5, 8, 3) # Number of female characters (estimated)\n  )\n# View the dataset\nnovels\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  title             author  year genre pages  words characters rating male_chars\n  <chr>             <chr>  <dbl> <chr> <dbl>  <dbl>      <dbl>  <dbl>      <dbl>\n1 1984              Orwell  1949 Dyst…   328  82000         30    4.2         20\n2 Pride and Prejud… Austen  1813 Roma…   432 108000         25    4.5         10\n3 The Great Gatsby  Fitzg…  1925 Mode…   180  45000         15    4           10\n4 To Kill a Mockin… Lee     1960 Comi…   281  70250         20    4.3         12\n5 The Catcher in t… Salin…  1951 Comi…   234  58500         10    4.1          7\n# ℹ 1 more variable: female_chars <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\nThis dataset gives us a rich set of variables to explore, including publication year, word count, genre, character gender representation, and modern reader ratings.\n\n\n## 1. The Basic Structure of a ggplot\n\nEvery ggplot2 plot starts with the `ggplot()` function and uses `+` to add layers. The basic structure is:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = <DATA>) +\n<GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))\n```\n:::\n\n\n\n\n\n\n\n\n\nLet's create a simple scatter plot of publication year vs. word count:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = novels) +\ngeom_point(mapping = aes(x = year, y = words))\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n::: {.callout-note}\n## Key Concepts\n- `ggplot(data = novels)`: Initializes the plot with our dataset\n- `geom_point()`: Adds a layer of points (for a scatter plot)\n- `aes(x = year, y = words)`: Maps variables to aesthetic properties (here, x and y positions)\n:::\n\n## 2. Aesthetic Mappings\n\nAesthetics are visual properties of the objects in your plot. Common aesthetics include:\n- x and y positions\n- color\n- size\n- shape\n\nLet's map the rating to the color of the points:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = novels) +\ngeom_point(mapping = aes(x = year, y = words, color = rating))\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## 3. Adding Labels with labs()\n\nWe can improve our plot by adding informative labels:\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = novels) +\ngeom_point(mapping = aes(x = year, y = words, color = rating)) +\nlabs(title = \"Classic Novels: Publication Year vs. Word Count\",\n     x = \"Year of Publication\",\n     y = \"Number of Words\",\n     color = \"Rating\")\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## 4. Geometric Objects (geoms)\n\nDifferent geom functions create different types of plots. Let's create a bar plot of character counts:\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = novels) +\ngeom_col(mapping = aes(x = title, y = characters)) +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n::: {.callout-note}\n## Common geoms\n- `geom_point()`: Scatter plots\n- `geom_line()`: Line graphs\n- `geom_col()` or `geom_bar()`: Bar charts\n- `geom_boxplot()`: Box plots\n:::\n\n\n\n## Learning Check 🏁\n\n\n\n# Building a Simple Slot Machine 🎰\n\nNow, let's use our tidyverse skills to create a simple virtual slot machine!\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n# Define slot machine symbols\nsymbols <- c(\"🍒\", \"🍋\", \"🍊\", \"🍇\", \"🔔\", \"💎\")\n\n# Function to play the slot machine\nplay_slot_machine <- function(n_plays = 10) {\n  tibble(\n    play = 1:n_plays,\n    symbol1 = sample(symbols, n_plays, replace = TRUE),\n    symbol2 = sample(symbols, n_plays, replace = TRUE),\n    symbol3 = sample(symbols, n_plays, replace = TRUE)\n  ) %>%\n  mutate(\n    win = symbol1 == symbol2 & symbol2 == symbol3,\n    result = if_else(win, \"💰\", \"😢\")\n  )\n}\n\n# Simulate 20 plays\nresults <- play_slot_machine(20)\n\n#Display results\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 6\n    play symbol1 symbol2 symbol3 win   result\n   <int> <chr>   <chr>   <chr>   <lgl> <chr> \n 1     1 💎      💎      🔔      FALSE 😢    \n 2     2 🍋      🍊      🍋      FALSE 😢    \n 3     3 🍊      🍊      🍒      FALSE 😢    \n 4     4 🍋      🍇      🔔      FALSE 😢    \n 5     5 🍊      💎      🔔      FALSE 😢    \n 6     6 🍇      🍇      🍋      FALSE 😢    \n 7     7 🍊      🍊      🍇      FALSE 😢    \n 8     8 💎      🍊      🍇      FALSE 😢    \n 9     9 🍋      🍇      🍒      FALSE 😢    \n10    10 🍋      🍒      🍊      FALSE 😢    \n11    11 🍊      🍊      🍊      TRUE  💰    \n12    12 🍊      🍊      💎      FALSE 😢    \n13    13 🍒      🍇      🔔      FALSE 😢    \n14    14 🍊      🍇      🍒      FALSE 😢    \n15    15 🔔      🔔      🍒      FALSE 😢    \n16    16 🍒      🍊      🍋      FALSE 😢    \n17    17 🍋      🍊      🍋      FALSE 😢    \n18    18 💎      🔔      🍋      FALSE 😢    \n19    19 🍒      🍊      🍋      FALSE 😢    \n20    20 🍊      🔔      🍊      FALSE 😢    \n```\n\n\n:::\n\n```{.r .cell-code}\n# Summarize wins\nsummary <- results %>%\n  summarise(\n    total_plays = n(),\n    wins = sum(win),\n    win_percentage = mean(win)*100\n  )\nprint(summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  total_plays  wins win_percentage\n        <int> <int>          <dbl>\n1          20     1              5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize results\nggplot(results, aes(x = result, fill = result)) +\ngeom_bar() +\nlabs(title = \"Slot Machine Results\", x = \"Outcome\", y = \"Count\") +\ntheme_minimal() +\nscale_fill_manual(\n  values = c(\"💰\" = \"green\", \"😢\" = \"red\"),\n  labels = c(\"💰\" = \"Win\", \"😢\" = \"Lose\")\n) +\nguides(fill = guide_legend(title = \"Result\"))\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\nThis simplified slot machine simulation demonstrates several key tidyverse concepts:\n\n1. Using `tibble()` to create a data frame\n2. Utilizing `sample()` for random selection\n3. Employing `mutate()` to add new columns based on conditions\n4. Using `summarise()` to calculate summary statistics\n5. Visualizing results with `ggplot2`\n\n## Hands-On Coding 💻\n\nLet's explore our slot machine simulation with some exercises:\n\n1. Modify the `play_slot_machine()` function to include a `bet` amount for each play.\n2. Calculate the total winnings (assume a win pays 3 times the bet).\n3. Visualize the distribution of symbols in all plays.\n\n<div id=\"hidden-content2\" style=\"display: none;\">\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Modified play_slot_machine function\nplay_slot_machine <- function(n_plays = 10, min_bet = 1, max_bet = 10) {\n  tibble(\n    play = 1:n_plays,\n    bet = sample(min_bet:max_bet, n_plays, replace = TRUE),\n    symbol1 = sample(symbols, n_plays, replace = TRUE),\n    symbol2 = sample(symbols, n_plays, replace = TRUE),\n    symbol3 = sample(symbols, n_plays, replace = TRUE)\n  ) %>%\n  mutate(\n    win = symbol1 == symbol2 & symbol2 == symbol3,\n    result = if_else(win, \"💰\", \"😢\"),\n    winnings = if_else(win, bet*3, 0)\n  )\n}\n# Simulate 100 plays\nresults <- play_slot_machine(100)\n# Calculate total winnings\ntotal_winnings <- results %>%\nsummarise(\ntotal_bet = sum(bet),\ntotal_won = sum(winnings),\nnet_profit = total_won - total_bet\n)\nprint(total_winnings)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  total_bet total_won net_profit\n      <int>     <dbl>      <dbl>\n1       591       108       -483\n```\n\n\n:::\n\n```{.r .cell-code}\n# Visualize symbol distribution\nresults %>%\n  pivot_longer(cols = starts_with(\"symbol\"), names_to = \"reel\", values_to = \"symbol\") %>%\n  ggplot(aes(x = symbol, fill = symbol)) +\n  geom_bar() +\n  facet_wrap(~reel) +\n  labs(title = \"Distribution of Symbols\", x = \"Symbol\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('button2', 'hidden-content2');\n</script>\n\n# Conclusion\n\n::: {.callout-note}\n## Key Takeaways\nIn this chapter, we've covered:\n\n- The basics of tidyverse and its core packages\n- Data manipulation with dplyr functions\n- Data visualization with ggplot2\n- Applied tidyverse concepts to analyze our books dataset\n- Built a virtual slot machine using tidyverse functions\n:::\n\nThese skills form an essential foundation for working with data in R using the tidyverse. As we progress in our digital humanities journey, we'll build upon these concepts to perform more complex data manipulations and analyses.\n\n::: {.topic-flow}\n::: {.topic-box .highlight-blue}\nTidyverse Basics\n:::\n::: {.topic-box .highlight-green}\nData Manipulation\n:::\n::: {.topic-box .highlight-yellow}\nData Visualization\n:::\n::: {.topic-box .highlight-pink}\nPractical Application\n:::\n:::\n\n<iframe src=\"float_traffic.html\" width=\"200px\" height=\"200px\" style=\"border:none; position: fixed; bottom: 10px; right: 10px; z-index: 9999;\" scrolling=\"no\"></iframe>\n\n<iframe src=\"float_dash.html\" width=\"200px\" height=\"200px\" style=\"border:none; position: fixed; bottom: 10px; left: 10px; z-index: 9999;\" scrolling=\"no\"></iframe>\n",
    "supporting": [
      "05-tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}