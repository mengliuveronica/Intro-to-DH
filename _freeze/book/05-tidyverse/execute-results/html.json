{
  "hash": "c8484c73013b8573cd470aa62cab5641",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"§5 Spinning the Reels 🎰\"\nsubtitle: \"Introduction to Tidyverse\"\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-link: true\n    highlight-style: github\n    include-in-header:\n      text: |\n        <script src=\"quiz.js\"></script>\n        <script src=\"content-switch.js\"></script>\nfilters: \n - collapse-callout.lua\nexecute:\n  freeze: auto\n---\n\n\n\n\nWelcome to the exciting world of tidyverse! In this chapter, we'll build on our knowledge of R by exploring the tidyverse, a collection of R packages designed for data science. We'll create a virtual slot machine to demonstrate the power and simplicity of tidyverse functions.\n\n::: {.callout-note}\n## Learning Objectives\n- 📦 Understand the basics of tidyverse and its core packages\n- 🔄 Learn to manipulate data with dplyr functions\n- 📊 Visualize data using ggplot2\n- 🎰 Build a virtual slot machine using tidyverse functions\n:::\n\n# Introduction to Tidyverse 📦\n\nTidyverse is a collection of R packages that work together harmoniously for data manipulation, exploration, and visualization. \n\n::: {.callout-tip}\n## Tidyverse vs. Base R?\n\nYou might wonder why we're learning Tidyverse when R already has built-in functions (known as Base R). Here's why:\n\n1. Readability: Tidyverse code is often easier to read and understand, especially for beginners. It uses a consistent style and vocabulary across its packages.\n\n2. Workflow: Tidyverse functions work well together, creating a smooth \"pipeline\" for data analysis. This makes it easier to perform complex operations step-by-step.\n\n3. Modern approach: Tidyverse incorporates more recent developments in R programming, addressing some limitations of Base R.\n\n4. Consistency: Tidyverse functions behave predictably, reducing unexpected outcomes that sometimes occur with Base R functions.\n\n5. Community support: Tidyverse has a large, active community, which means more resources, tutorials, and help are available online.\n\nWhile Base R is still important and powerful, Tidyverse provides a more accessible entry point for beginners and a efficient toolkit for data analysis tasks common in Digital Humanities.\n\nRemember, you're not choosing one over the other permanently. As you grow more comfortable with R, you'll likely use both Tidyverse and Base R, selecting the best tool for each specific task.\n:::\n\nLet's start by loading the tidyverse:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('tidyverse')\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n\nThe core tidyverse includes packages like dplyr (for data manipulation) and ggplot2 (for data visualization).\n\n![](images/tidyverse.png)\n\n::: {.callout-note}\n## Core Tidyverse Packages\nThe core tidyverse includes several packages, each with a specific purpose:\n\n1. dplyr: for data manipulation (like sorting, filtering, and summarizing data)\n2. ggplot2: for data visualization (creating graphs and charts)\n3. tidyr: for tidying data (organizing data into a consistent format)\n4. readr: for reading rectangular data (importing data from files)\n5. purrr: for functional programming (applying functions to data)\n6. tibble: for modern data frames (an enhanced version of R's traditional data structure)\n\nFor routine data analysis tasks, we mainly use dplyr and ggplot2, which is what we will focus on in this chapter.\n:::\n\n\n\n\n## Learning Check 🏁 \n\n<div id=\"quiz1\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What is tidyverse?\",\n      options: [\n        \"A single R package\",\n        \"A collection of R packages for data science\",\n        \"A programming language\",\n        \"A type of data structure\"\n      ]\n    },\n    {\n      text: \"Which of the following is NOT a core tidyverse package?\",\n      options: [\n        \"dplyr\",\n        \"ggplot2\",\n        \"tidyr\",\n        \"base\"\n      ]\n    }\n  ],\n  answers: [1, 3]\n}, \"quiz1\");\n</script>\n\n# Data Manipulation with `dplyr` 🔄\n\nLet's look at a *mock* book dataset again, but this time using dplyr functions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the books dataset\nbooks <- tibble(\n  title = c(\"1984\", \"Pride and Prejudice\", \"The Great Gatsby\", \"To Kill a Mockingbird\", \"The Catcher in the Rye\"),\n  author = c(\"Orwell\", \"Austen\", \"Fitzgerald\", \"Lee\", \"Salinger\"),\n  year = c(1949, 1813, 1925, 1960, 1951),\n  genre = c(\"Dystopian\", \"Romance\", \"Modernist\", \"Coming-of-age\", \"Coming-of-age\"),\n  pages = c(328, 432, 180, 281, 234)\n)\n\n# View the books\nbooks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  title                  author      year genre         pages\n  <chr>                  <chr>      <dbl> <chr>         <dbl>\n1 1984                   Orwell      1949 Dystopian       328\n2 Pride and Prejudice    Austen      1813 Romance         432\n3 The Great Gatsby       Fitzgerald  1925 Modernist       180\n4 To Kill a Mockingbird  Lee         1960 Coming-of-age   281\n5 The Catcher in the Rye Salinger    1951 Coming-of-age   234\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.callout-tip}\n## Tibbles vs. Data Frames\nYou might notice we used `tibble()` instead of `data.frame()`. Tibbles are modern data frames that are part of the tidyverse. They have some advantages over traditional data frames:\n\n1. They have a cleaner print method\n2. They don't change column types\n3. They don't create row names\n4. They warn you when a column doesn't exist\n\nFor most purpose you can use them interchangeably with data frames, but the Tidyverse version is often easier and more inuitive to use and we would recommend using Tidyverse versions over Base R versions. \n\nBelow are more examples of Tidyverse alternaties to Base R (the built-in functions of R):\n\n- Reading data: `read_csv()` (Tidyverse) vs. `read.csv()` (Base R)\n- Filtering data: `filter()` (Tidyverse) vs. `subset()` (Base R)\n- Plotting: `ggplot()` (Tidyverse) vs. `plot()` (Base R)\n- Sorting: `arrange()` (Tidyverse) vs. `order()` or `sort()` (Base R)\n\n:::\n\nNow, let's explore some key dplyr functions:\n\n::: {.callout-note}\n## Core Functions in `dplyr`\n\ndplyr provides a set of powerful functions for manipulating data:\n\n1. `filter()`: Subset rows based on conditions. \n   This function allows you to keep only the data rows that meet specific criteria, like selecting books published after a certain year.\n\n2. `select()`: Choose specific columns. \n   Use this when you want to focus on particular variables in your dataset, similar to picking certain columns in a spreadsheet.\n\n3. `mutate()`: Add new variables or modify existing ones. \n   This function lets you create new columns based on calculations from existing data, or change values in current columns.\n\n4. `arrange()`: Sort rows. \n   When you need to order your data based on one or more variables, such as sorting books by publication date, use this function.\n\n5. `summarise()`: Compute summary statistics. \n   This function is useful for calculating things like averages, totals, or counts across your entire dataset or within groups.\n\n6. `group_by()`: Group data for operations. \n   Use this to divide your data into groups before applying other functions, allowing you to perform calculations within each group separately.\n\n7. `join()`: Combine data from multiple tables. \n   When your data is split across different tables or datasets, this function helps you merge them together based on common variables.\n\nThese functions are designed to work together, allowing you to perform complex data manipulations step by step. As you practice, you'll find yourself combining these functions to answer increasingly sophisticated questions about your data.\n\n#### Cheat Sheet {.unnumbered}\n\nFor quick reference, here's a handy cheat sheet summarizing the key dplyr functions:\n\n[Dplyr Cheet Sheet](https://nyu-cdsc.github.io/learningr/assets/data-transformation.pdf)\n\nMost tidyverse packages have corresponding cheat sheets. You can google the package name + cheat sheet to download them yourself. \n\n:::\n\n## `filter()`: Subset Rows\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find all books published after 1900\nbooks %>% \nfilter(year > 1900)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  title                  author      year genre         pages\n  <chr>                  <chr>      <dbl> <chr>         <dbl>\n1 1984                   Orwell      1949 Dystopian       328\n2 The Great Gatsby       Fitzgerald  1925 Modernist       180\n3 To Kill a Mockingbird  Lee         1960 Coming-of-age   281\n4 The Catcher in the Rye Salinger    1951 Coming-of-age   234\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.callout-note}\n## The Pipe Operator `%>%`\n\nThe `%>%` operator is called the \"pipe\" operator. It's a fundamental concept in the tidyverse that greatly enhances code readability and workflow. Here's how it works:\n\n1. Function chaining: The pipe takes the output of one function and passes it as the first argument to the next function. This allows us to chain multiple operations together in a logical sequence.\n\n2. Left-to-right reading: Instead of nesting functions within each other, which can be hard to read, the pipe allows us to read our code from left to right, much like we read English.\n\n3. Improved readability: By using the pipe, we can break down complex operations into a series of smaller, more manageable steps.\n\nFor example, let's compare these two equivalent operations:\n\nWithout pipe:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(books, year > 1900)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  title                  author      year genre         pages\n  <chr>                  <chr>      <dbl> <chr>         <dbl>\n1 1984                   Orwell      1949 Dystopian       328\n2 The Great Gatsby       Fitzgerald  1925 Modernist       180\n3 To Kill a Mockingbird  Lee         1960 Coming-of-age   281\n4 The Catcher in the Rye Salinger    1951 Coming-of-age   234\n```\n\n\n:::\n:::\n\n\n\n\nWith pipe:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks %>% filter(year > 1900)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  title                  author      year genre         pages\n  <chr>                  <chr>      <dbl> <chr>         <dbl>\n1 1984                   Orwell      1949 Dystopian       328\n2 The Great Gatsby       Fitzgerald  1925 Modernist       180\n3 To Kill a Mockingbird  Lee         1960 Coming-of-age   281\n4 The Catcher in the Rye Salinger    1951 Coming-of-age   234\n```\n\n\n:::\n:::\n\n\n\n\nThe piped version can be read as \"Take the books data, then filter it to keep only books published after 1900\".\n\nFor more complex operations, the benefits become even clearer, which we will see in a moment.\n\n:::\n\n\n## `select()`: Choose Columns\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select only title and author columns\nbooks %>%\nselect(title, author)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  title                  author    \n  <chr>                  <chr>     \n1 1984                   Orwell    \n2 Pride and Prejudice    Austen    \n3 The Great Gatsby       Fitzgerald\n4 To Kill a Mockingbird  Lee       \n5 The Catcher in the Rye Salinger  \n```\n\n\n:::\n:::\n\n\n\n\n\n## `mutate()`: Add New Variables\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a new column for the book's age\nbooks %>%\nmutate(age = 2024 - year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  title                  author      year genre         pages   age\n  <chr>                  <chr>      <dbl> <chr>         <dbl> <dbl>\n1 1984                   Orwell      1949 Dystopian       328    75\n2 Pride and Prejudice    Austen      1813 Romance         432   211\n3 The Great Gatsby       Fitzgerald  1925 Modernist       180    99\n4 To Kill a Mockingbird  Lee         1960 Coming-of-age   281    64\n5 The Catcher in the Rye Salinger    1951 Coming-of-age   234    73\n```\n\n\n:::\n:::\n\n\n\n\n\n## `arrange()`: Sort Rows\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort books by year, oldest first\nbooks %>%\narrange(year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  title                  author      year genre         pages\n  <chr>                  <chr>      <dbl> <chr>         <dbl>\n1 Pride and Prejudice    Austen      1813 Romance         432\n2 The Great Gatsby       Fitzgerald  1925 Modernist       180\n3 1984                   Orwell      1949 Dystopian       328\n4 The Catcher in the Rye Salinger    1951 Coming-of-age   234\n5 To Kill a Mockingbird  Lee         1960 Coming-of-age   281\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n#### Comparing `arrange()` and `order()`\nIn Tidyverse, we use `arrange()` to sort data frames, which is often more intuitive and easier to use with multiple columns. In Base R, you typically use `order()` within square brackets or `sort()` for vectors.\n  \nFor example:\n\nTidyverse: `data %>% arrange(column_name)`\n\nBase R: `data[order(data$column_name), ]`\n\nThe Tidyverse method is more readable, especially when sorting by multiple columns or in descending order.\n\n:::\n\n## `summarise()`: Summarize Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average number of pages\nbooks %>%\nsummarise(avg_pages = mean(pages))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  avg_pages\n      <dbl>\n1       291\n```\n\n\n:::\n:::\n\n\n\n\n\n## `group_by()`: Group Data for Operations\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Average pages by genre\nbooks %>%\ngroup_by(genre) %>%\nsummarise(avg_pages = mean(pages))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  genre         avg_pages\n  <chr>             <dbl>\n1 Coming-of-age      258.\n2 Dystopian          328 \n3 Modernist          180 \n4 Romance            432 \n```\n\n\n:::\n:::\n\n\n\n\n\n## Chaining Multiple Actions \n\nOne of the key advantages of Tidyverse is the ability to chain multiple actions together using the pipe operator (`%>%`). Let's compare how we can perform a series of data manipulations using both Tidyverse and Base R.\n\nLet's say we want to:\n1. Filter books published after 1900\n2. Select only the title, author, and year columns\n3. Sort the results by year\n4. Get the first 3 entries\n\n### Tidyverse Approach\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks %>%\nfilter(year > 1900) %>%\nselect(title, author, year) %>%\narrange(year) %>%\nhead(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  title                  author      year\n  <chr>                  <chr>      <dbl>\n1 The Great Gatsby       Fitzgerald  1925\n2 1984                   Orwell      1949\n3 The Catcher in the Rye Salinger    1951\n```\n\n\n:::\n:::\n\n\n\n\n\nIn this Tidyverse approach, we can read the code from left to right, following the logical flow of operations. Each step is clearly defined, and the pipe operator (`%>%`) passes the result of each operation to the next.\n\n### Base R Approach\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter books published after 1900\nfiltered_books <- books[books$year > 1900, ]\n# Select only title, author, and year columns\nselected_books <- filtered_books[, c(\"title\", \"author\", \"year\")]\n# Sort by year\nsorted_books <- selected_books[order(selected_books$year), ]\n# Get the first 3 entries\nresult <- head(sorted_books, 3)\n# View the result\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  title                  author      year\n  <chr>                  <chr>      <dbl>\n1 The Great Gatsby       Fitzgerald  1925\n2 1984                   Orwell      1949\n3 The Catcher in the Rye Salinger    1951\n```\n\n\n:::\n:::\n\n\n\n\n\nIn the Base R approach, we need to create intermediate variables at each step. The code reads from top to bottom, with each line representing a separate operation.\n\n## Learning Check 🏁\n\n<div id=\"quiz-dplyr\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"Which dplyr function would you use to select specific columns from a dataset?\",\n      options: [\n        \"filter()\",\n        \"select()\",\n        \"mutate()\",\n        \"arrange()\"\n      ]\n    },\n    {\n      text: \"If you want to create a new column based on existing data, which function should you use?\",\n      options: [\n        \"summarise()\",\n        \"group_by()\",\n        \"mutate()\",\n        \"filter()\"\n      ]\n    },\n    {\n      text: \"Which function allows you to perform operations on grouped data?\",\n      options: [\n        \"arrange()\",\n        \"select()\",\n        \"filter()\",\n        \"group_by()\"\n      ]\n    },\n    {\n      text: \"To sort a dataset based on one or more variables, which `dplyr` function would you use?\",\n      options: [\n        \"arrange()\",\n        \"sort()\",\n        \"order()\",\n        \"filter()\"\n      ]\n    }\n  ],\n  answers: [1, 2, 3, 0]\n}, \"quiz-dplyr\");\n</script>\n\n\n\n## Hands-On Coding 💻\n\nTry the following exercises:\n\n1. Use `filter()` to find all books written by Austen or Orwell.\n2. Use `arrange()` to sort the books by number of pages, from longest to shortest.\n3. Use `mutate()` to add a new column called `words`, assuming an average of 250 words per page.\n4. Use `group_by()` and `summarise()` to find the earliest publication year for each genre.\n\n### Exercise 1: Filter books by Austen or Orwell\n\n<div id=\"hint1-1\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint\nUse the `%in%` operator within `filter()` to check if the author is in a vector of names.\n:::\n</div>\n\n<script>\ncreateProgressiveHints('hint1', 1);\n</script>\n\n<div id=\"template1\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks %>%\n  filter(author _ c(\"Austen\", \"Orwell\"))\n```\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('template-button1', 'template1', 'Show Template');\n</script>\n\n<div id=\"solution1\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks %>%\n  filter(author %in% c(\"Austen\", \"Orwell\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  title               author  year genre     pages\n  <chr>               <chr>  <dbl> <chr>     <dbl>\n1 1984                Orwell  1949 Dystopian   328\n2 Pride and Prejudice Austen  1813 Romance     432\n```\n\n\n:::\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('solution-button1', 'solution1');\n</script>\n\n### Exercise 2: Sort books by pages, longest to shortest\n\n<div id=\"hint2-1\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint\nUse `arrange()` with `desc()` to sort in descending order.\n:::\n</div>\n\n<script>\ncreateProgressiveHints('hint2', 1);\n</script>\n\n<div id=\"template2\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks %>%\n  arrange(_(_))\n```\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('template-button2', 'template2', 'Show Template');\n</script>\n\n<div id=\"solution2\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks %>%\n  arrange(desc(pages))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  title                  author      year genre         pages\n  <chr>                  <chr>      <dbl> <chr>         <dbl>\n1 Pride and Prejudice    Austen      1813 Romance         432\n2 1984                   Orwell      1949 Dystopian       328\n3 To Kill a Mockingbird  Lee         1960 Coming-of-age   281\n4 The Catcher in the Rye Salinger    1951 Coming-of-age   234\n5 The Great Gatsby       Fitzgerald  1925 Modernist       180\n```\n\n\n:::\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('solution-button2', 'solution2');\n</script>\n\n### Exercise 3: Add words column\n\n<div id=\"hint3-1\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint\nUse `mutate()` to create a new column. Multiply the 'pages' column by 250.\n:::\n</div>\n\n<script>\ncreateProgressiveHints('hint3', 1);\n</script>\n\n<div id=\"template3\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks %>%\n  mutate(words = _ * _)\n```\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('template-button3', 'template3', 'Show Template');\n</script>\n\n<div id=\"solution3\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks %>%\n  mutate(words = pages * 250)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  title                  author      year genre         pages  words\n  <chr>                  <chr>      <dbl> <chr>         <dbl>  <dbl>\n1 1984                   Orwell      1949 Dystopian       328  82000\n2 Pride and Prejudice    Austen      1813 Romance         432 108000\n3 The Great Gatsby       Fitzgerald  1925 Modernist       180  45000\n4 To Kill a Mockingbird  Lee         1960 Coming-of-age   281  70250\n5 The Catcher in the Rye Salinger    1951 Coming-of-age   234  58500\n```\n\n\n:::\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('solution-button3', 'solution3');\n</script>\n\n### Exercise 4: Find earliest publication year by genre\n\n<div id=\"hint4-1\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint\nUse `group_by()` followed by `summarise()`. Within `summarise()`, use `min()` to find the earliest year.\n:::\n</div>\n\n<script>\ncreateProgressiveHints('hint4', 1);\n</script>\n\n<div id=\"template4\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks %>%\n  group_by(_) %>%\n  summarise(earliest_year = _(_))\n```\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('template-button4', 'template4', 'Show Template');\n</script>\n\n<div id=\"solution4\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbooks %>%\n  group_by(genre) %>%\n  summarise(earliest_year = min(year))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  genre         earliest_year\n  <chr>                 <dbl>\n1 Coming-of-age          1951\n2 Dystopian              1949\n3 Modernist              1925\n4 Romance                1813\n```\n\n\n:::\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('solution-button4', 'solution4');\n</script>\n\n\n# Data Visualization with ggplot2 📊\n\nggplot2 is a powerful package for creating beautiful and informative visualizations, especially useful for exploring data. \n\n\n## Expand the Books Dataset\n\nLet's expand the books dataset to include some more variables for visualization purposes:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnovels <- books %>%\n  mutate(\n    words = pages*250, # Estimating word count based on pages\n    characters = c(30, 25, 15, 20, 10), # Number of named characters (estimated)\n    rating = c(4.2, 4.5, 4.0, 4.3, 4.1), # Modern reader ratings (out of 5)\n    male_chars = c(20, 10, 10, 12, 7), # Number of male characters (estimated)\n    female_chars = c(10, 15, 5, 8, 3) # Number of female characters (estimated)\n  )\n# View the dataset\nnovels\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  title             author  year genre pages  words characters rating male_chars\n  <chr>             <chr>  <dbl> <chr> <dbl>  <dbl>      <dbl>  <dbl>      <dbl>\n1 1984              Orwell  1949 Dyst…   328  82000         30    4.2         20\n2 Pride and Prejud… Austen  1813 Roma…   432 108000         25    4.5         10\n3 The Great Gatsby  Fitzg…  1925 Mode…   180  45000         15    4           10\n4 To Kill a Mockin… Lee     1960 Comi…   281  70250         20    4.3         12\n5 The Catcher in t… Salin…  1951 Comi…   234  58500         10    4.1          7\n# ℹ 1 more variable: female_chars <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\nThis dataset gives us a rich set of variables to explore, including publication year, word count, genre, character gender representation, and modern reader ratings.\n\n\n## 1. The Basic Structure of a ggplot\n\nEvery ggplot2 plot starts with the `ggplot()` function and uses `+` to add layers. The basic structure is:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = <DATA>) +\nGEOM_FUNCTION(mapping = aes(<MAPPINGS>))\n```\n:::\n\n\n\n\n\nLet's create a simple scatter plot of publication year vs. word count (thousands):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = novels) +\ngeom_point(mapping = aes(x = year, y = words / 1000))\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n::: {.callout-note}\n## Key Concepts\n- `ggplot(data = novels)`: Initializes the plot with our dataset\n- `geom_point()`: Adds a layer of points (for a scatter plot)\n- `aes(x = year, y = words)`: Maps variables to aesthetic properties (here, x and y positions)\n:::\n\n## 2. Aesthetic Mappings\n\nAesthetics are visual properties of the objects in your plot. Common aesthetics include:\n- x and y positions\n- color\n- size\n- shape\n\nLet's map the rating to the color of the points:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = novels) +\ngeom_point(mapping = aes(x = year, y = words, color = rating))\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\nAlternatively, we can also use the size of the points to indicate the rating:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = novels) +\ngeom_point(mapping = aes(x = year, y = words, size = rating))\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## 3. Adding Labels with labs()\n\nWe can improve our plot by adding informative labels:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = novels) +\ngeom_point(mapping = aes(x = year, y = words/1000, size = rating)) +\nlabs(title = \"Classic Novels: Publication Year vs. Word Count\",\n     x = \"Year of Publication\",\n     y = \"Number of Words (thousands)\",\n     size = \"Rating\")\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## 4. Geometric Objects (geoms)\n\nDifferent geom functions create different types of plots. Let's create a bar plot of character counts:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = novels) +\ngeom_col(mapping = aes(x = title, y = characters)) +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n::: {.callout-note}\n## Common geoms\n- `geom_point()`: Scatter plots\n- `geom_line()`: Line graphs\n- `geom_col()` or `geom_bar()`: Bar charts\n- `geom_boxplot()`: Box plots\n:::\n\n::: {.callout-tip}\n## R Graph Gallery: Inspiration for Your Visualizations\n\nFor more inspiration and examples of what's possible with ggplot2, check out the [R Graph Gallery](https://r-graph-gallery.com/). This fantastic resource offers:\n\n- A wide variety of chart types and styles\n- Reproducible code for each graph\n- Explanations and use cases for different visualizations\n- Advanced techniques and customizations\n\nExploring the R Graph Gallery can help you discover new ways to visualize your data and improve your ggplot2 skills!\n:::\n\n## Learning Check 🏁\n\n<div id=\"quiz-ggplot\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"Which function is used to initialize a ggplot?\",\n      options: [\n        \"geom_point()\",\n        \"ggplot()\",\n        \"aes()\",\n        \"labs()\"\n      ]\n    },\n    {\n      text: \"What does 'aes()' stand for in ggplot2?\",\n      options: [\n        \"Aesthetic mappings\",\n        \"Axis settings\",\n        \"Advanced elements\",\n        \"Automated editing system\"\n      ]\n    },\n    {\n      text: \"Which geom function would you use to create a scatter plot?\",\n      options: [\n        \"geom_bar()\",\n        \"geom_line()\",\n        \"geom_point()\",\n        \"geom_boxplot()\"\n      ]\n    },\n    {\n      text: \"Which function is used to add labels to a ggplot?\",\n      options: [\n        \"add_labels()\",\n        \"title()\",\n        \"labs()\",\n        \"text()\"\n      ]\n    }\n  ],\n  answers: [1, 0, 2, 2]\n}, \"quiz-ggplot\");\n</script>\n\n\n# Building a Simple Slot Machine 🎰\n\nNow, let's use our tidyverse skills to create and analyze a simple virtual slot machine! \n\n::: {.callout-tip}\n## What is a slot machine and how does it work\n\nA slot machine is a game you might see in a casino. Here's how it works:\n\n1. **Look**: It usually has three or more spinning wheels with pictures on them.\n\n2. **Symbols**: In our game, we use fruit (🍒, 🍋, 🍊, 🍇) and other symbols (🔔, 💎).\n\n3. **How to play**: You press a button to make the wheels spin.\n\n4. **Winning**: You win if the pictures line up in a certain way when the wheels stop. For example, you win if all three symbols are the same (e.g., 🍋🍋🍋).\n\n5. **Random**: Each spin is random - you can't predict what will come up. But in real casinos, not all outcomes have the same chance. Casinos set the odds to make sure they make money over time.\n\nSlot machines are often used to teach math and probability. In our case, we're using it to learn about data analysis. It's a fun way to practice with numbers and see patterns. \n\nIn real life, it's wise to stay away from slot machines. The odds are set so that *the casino always wins* in the long run. Our virtual slot machine lets us explore data without any risk!\n:::\n\nFirst, let's create our slot machine. The code has been provided for you. Take a moment to read through the script below and see if you can understand what each part does. Don't worry if you don't understand everything - we'll break it down together afterwards.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# Define slot machine symbols\nsymbols <- c(\"🍒\", \"🍋\", \"🍊\", \"🍇\", \"🔔\", \"💎\")\n\n# Function to play the slot machine\nplay_slot_machine <- function(n_plays = 10) {\n  tibble(\n    play = 1:n_plays,\n    symbol1 = sample(symbols, n_plays, replace = TRUE),\n    symbol2 = sample(symbols, n_plays, replace = TRUE),\n    symbol3 = sample(symbols, n_plays, replace = TRUE)\n  ) %>%\n  mutate(\n    win = symbol1 == symbol2 & symbol2 == symbol3,\n    result = if_else(win, \"💰\", \"😢\")\n  )\n}\n\n# Simulate 100 plays\nresults <- play_slot_machine(100)\n\n# Display the first few results\nhead(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n   play symbol1 symbol2 symbol3 win   result\n  <int> <chr>   <chr>   <chr>   <lgl> <chr> \n1     1 🔔      🍋      🔔      FALSE 😢    \n2     2 🔔      🔔      🔔      TRUE  💰    \n3     3 💎      🍒      🍊      FALSE 😢    \n4     4 🍊      🍊      🍊      TRUE  💰    \n5     5 🍒      🍋      🍇      FALSE 😢    \n6     6 🔔      🍇      💎      FALSE 😢    \n```\n\n\n:::\n:::\n\n\n\n\n\nAfter you've had a chance to examine the code, click \"Show Solution\" below to see a detailed, line-by-line explanation of what's happening in this script.\n\n<div id=\"solution-slot\" style=\"display: none;\">\n\nHere's a detailed breakdown of our slot machine script:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a function called play_slot_machine\n# It takes one argument, n_plays, with a default value of 10\nplay_slot_machine <- function(n_plays = 10) {\n  # Create a tibble (a modern version of a data frame) with our results\n  tibble(\n    # Create a column 'play' with numbers from 1 to n_plays\n    play = 1:n_plays,\n    # Create three columns (symbol1, symbol2, symbol3) with random symbols\n    # sample() picks random elements from symbols, n_plays times, with replacement\n    symbol1 = sample(symbols, n_plays, replace = TRUE),\n    symbol2 = sample(symbols, n_plays, replace = TRUE),\n    symbol3 = sample(symbols, n_plays, replace = TRUE)\n  ) %>%\n  # Use mutate to add two new columns based on our existing data\n  mutate(\n    # 'win' is TRUE if all three symbols are the same, FALSE otherwise\n    win = symbol1 == symbol2 & symbol2 == symbol3,\n    # 'result' shows 💰 for a win, 😢 for a loss\n    result = if_else(win, \"💰\", \"😢\")\n  )\n}\n\n# Use our function to simulate 100 plays of the slot machine\n# The results are stored in the 'results' variable\nresults <- play_slot_machine(100)\n\n# Display the first few rows of our results\n# This helps us quickly check that our function is working as expected\nhead(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n   play symbol1 symbol2 symbol3 win   result\n  <int> <chr>   <chr>   <chr>   <lgl> <chr> \n1     1 🍊      🍊      🍋      FALSE 😢    \n2     2 🍇      🍋      🍇      FALSE 😢    \n3     3 🍒      🍇      🔔      FALSE 😢    \n4     4 🍒      🔔      🍊      FALSE 😢    \n5     5 🔔      🍋      🍒      FALSE 😢    \n6     6 🍊      🔔      🍋      FALSE 😢    \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nThis script demonstrates several key concepts:\n\n1. Using tidyverse functions like `tibble()` and `mutate()`\n2. Creating a custom function in R\n3. Using `sample()` for random selection\n4. Logical operations and conditional statements in R\n5. The pipe operator `%>%` for chaining operations\n\nBy understanding this script, you're getting a great introduction to data manipulation with tidyverse!\n\n</div>\n\n<script>\ncreateToggleSection('solution-button-slot', 'solution-slot');\n</script>\n\nNow that we understand how our slot machine works, let's move on to analyzing its results!\n\n\n## Hands-On Coding 💻\n\nLet's explore our slot machine results with some exercises. Remember to use tidyverse functions like `filter()`, `summarise()`, `group_by()`, and `ggplot()`.\n\n### Exercise 1: Summarize the Results\n\nCalculate the total number of plays, number of wins, and the win percentage.\n\n<div id=\"hint-slot1-1\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint\nUse `summarise()` with `n()`, `sum()` functions.\n:::\n</div>\n\n<script>\ncreateProgressiveHints('hint-slot1', 1);\n</script>\n\n<div id=\"template-slot1\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults %>%\n  summarise(\n    total_plays = _(),\n    wins = _(win),\n    win_percentage = wins/ _ *100\n)\n\nresults %>%summarise(n())\n```\n:::\n\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('template-button-slot1', 'template-slot1', 'Show Template');\n</script>\n\n<div id=\"solution-slot1\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults %>%\n  summarise(\n    total_plays = n(),\n    wins = sum(win),\n    win_percentage = wins / total_plays * 100\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  total_plays  wins win_percentage\n        <int> <int>          <dbl>\n1         100     1              1\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.callout-tip}\n## `n()` vs. `nrow()`\n\n1. n() is a dplyr function:\n\n- It's designed to work seamlessly within dplyr verbs like summarise(), mutate(), and filter().\n\n- It's particularly useful when working with grouped data.\n\n2. nrow() is a base R function:\n\n- It works on data frames and matrices, but not directly within dplyr pipelines.\n\n- It doesn't automatically respect grouping in dplyr operations.\n\n3. Behavior with grouped data:\n\n- n() will give you the count for each group when used with group_by().\n\n- nrow() will always return the total number of rows in the entire data frame.\n\n4. Syntax in dplyr operations:\n\n- n() can be used directly: summarise(count = n())\n\n- nrow() typically needs to be wrapped: summarise(count = nrow(.))\n\n5. Performance:\n- n() is optimized for dplyr operations and can be faster in some cases.\n\n:::\n\n</div>\n\n<script>\ncreateToggleSection('solution-button-slot1', 'solution-slot1');\n</script>\n\n### Exercise 2: Find Winning Combinations\n\nCreate a new data frame showing only the winning plays and their symbol combinations.\n\n<div id=\"hint-slot2-1\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint\nUse `filter()` to select winning plays, then `select()` to choose the columns you want to display.\n:::\n</div>\n\n<script>\ncreateProgressiveHints('hint-slot2', 1);\n</script>\n\n<div id=\"template-slot2\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinning_plays <- results %>%\n  filter(_ == TRUE) %>%\n  select(play, symbol1, symbol2, symbol3)\n\nprint(winning_plays)\n```\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('template-button-slot2', 'template-slot2', 'Show Template');\n</script>\n\n<div id=\"solution-slot2\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinning_plays <- results %>%\n  filter(win == TRUE) %>%\n  select(play, symbol1, symbol2, symbol3)\nprint(winning_plays)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n   play symbol1 symbol2 symbol3\n  <int> <chr>   <chr>   <chr>  \n1    28 🍋      🍋      🍋     \n```\n\n\n:::\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('solution-button-slot2', 'solution-slot2');\n</script>\n\n### Exercise 3: Visualize Symbol Distribution\n\nCreate a bar plot showing the distribution of symbols in the first reel (symbol1 column).\n\nEmojis often can't be rendered directly in plots. While there are packages like `emojifont` or `ggtext` that can handle emoji rendering, for simplicity, we'll use a text representation of the symbols.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults <- results %>%\n  mutate(symbol1_text = case_when(\n    symbol1 == \"🍒\" ~ \"Cherry\",\n    symbol1 == \"🍋\" ~ \"Lemon\",\n    symbol1 == \"🍊\" ~ \"Orange\",\n    symbol1 == \"🍇\" ~ \"Grapes\",\n    symbol1 == \"🔔\" ~ \"Bell\",\n    symbol1 == \"💎\" ~ \"Diamond\"\n  ))\n```\n:::\n\n\n\n\n\n<div id=\"hint-slot3-1\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint 1/2\nUse `ggplot()` with `geom_bar()` to create a bar chart of symbol1.\n:::\n</div>\n\n<div id=\"hint-slot3-2\" style=\"display: none;\">\n::: {.callout-tip collapse=\"false\"}\n## Hint 2/2\nIn `aes()`, map symbol1 to both x and fill for a colored bar chart.\n:::\n</div>\n\n<script>\ncreateProgressiveHints('hint-slot3', 2);\n</script>\n\n<div id=\"template-slot3\" style=\"display: none;\">\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(results, aes(x = _, fill = _)) +\n  geom_bar() +\n  labs(title = \"Distribution of Symbols in First Reel\", x = \"Symbol\", y = \"Count\") \n```\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('template-button-slot3', 'template-slot3', 'Show Template');\n</script>\n\n<div id=\"solution-slot3\" style=\"display: none;\">\n\n### A Simple Plot {.unnumbered}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(results, aes(x = symbol1_text, fill = symbol1_text)) +\n  geom_bar() +\n  labs(title = \"Distribution of Symbols in First Reel\", x = \"Symbol\", y = \"Count\") \n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n\n### A Customized Plot {.unnumbered}\nA strength of `ggplot2` is that it allows various cutomizations of the plot. Below is an example where we manually set the fill colors of the bar plot. You can also check out packages such as `RColorBrewer` for presets of color pallettes. `ggplot2` also has preset themes that you can use to immediately give the plot a cleaner or more professional look (e.g., the `theme_minimal()` used in the following example).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a custom color palette\nsymbol_colors <- c(\n  \"Cherry\" = \"#D2042D\",  # Red\n  \"Lemon\" = \"#FFF700\",   # Yellow\n  \"Orange\" = \"#FFA500\",  # Orange\n  \"Grapes\" = \"#6F2DA8\",  # Purple\n  \"Bell\" = \"#FFD700\",    # Gold\n  \"Diamond\" = \"#B9F2FF\"  # Light Blue\n)\n\nggplot(results, aes(x = symbol1_text, fill = symbol1_text)) +\n  geom_bar() +\n  scale_fill_manual(values = symbol_colors) +\n  labs(title = \"Distribution of Symbols in First Reel\", x = \"Symbol\", y = \"Count\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")  # Remove legend as it's redundant\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('solution-button-slot3', 'solution-slot3');\n</script>\n\nCongratulations! You've now practiced using various tidyverse functions to analyze and visualize data from our virtual slot machine. These skills are fundamental in data manipulation and analysis, which are crucial in many digital humanities projects.\n\n::: {.callout-note}\n## Key Takeaways\nIn this chapter, we've covered:\n\n- The basics of tidyverse and its core packages\n- Data manipulation with dplyr functions\n- Data visualization with ggplot2\n- Applied tidyverse concepts to analyze our books dataset\n- Built a virtual slot machine using tidyverse functions\n:::\n\nThese skills form an essential foundation for working with data in R using the tidyverse. As we progress in our digital humanities journey, we'll build upon these concepts to perform more complex data manipulations and analyses.\n\n::: {.topic-flow}\n::: {.topic-box .highlight-blue}\nTidyverse Basics\n:::\n::: {.topic-box .highlight-green}\nData Manipulation\n:::\n::: {.topic-box .highlight-yellow}\nData Visualization\n:::\n::: {.topic-box .highlight-pink}\nPractical Application\n:::\n:::\n\n<iframe src=\"float_traffic.html\" width=\"200px\" height=\"200px\" style=\"border:none; position: fixed; bottom: 10px; right: 10px; z-index: 9999;\" scrolling=\"no\"></iframe>\n\n<iframe src=\"float_dash.html\" width=\"200px\" height=\"200px\" style=\"border:none; position: fixed; bottom: 10px; left: 10px; z-index: 9999;\" scrolling=\"no\"></iframe>\n",
    "supporting": [
      "05-tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}