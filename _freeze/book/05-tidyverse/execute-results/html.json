{
  "hash": "1a894075c44385278af4763d8f930cf4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"§5 Spinning the Reels 🎰\"\nsubtitle: \"Introduction to Tidyverse\"\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-link: true\n    highlight-style: github\n    include-in-header:\n      text: |\n        <script src=\"quiz.js\"></script>\n        <script src=\"content-switch.js\"></script>\nfilters: \n - collapse-callout.lua\nexecute:\n  freeze: auto\n---\n\n\n\nWelcome to the exciting world of tidyverse! In this chapter, we'll build on our knowledge of R by exploring the tidyverse, a collection of R packages designed for data science. We'll create a virtual slot machine to demonstrate the power and simplicity of tidyverse functions.\n\n::: {.callout-tip}\n## Learning Objectives\n- 📦 Understand the basics of tidyverse and its core packages\n- 🔄 Learn to manipulate data with dplyr functions\n- 📊 Visualize data using ggplot2\n- 🎰 Build a virtual slot machine using tidyverse functions\n:::\n\n# Introduction to Tidyverse 📦\n\nTidyverse is a collection of R packages that work together harmoniously for data manipulation, exploration, and visualization. Let's start by loading the tidyverse:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages('tidyverse')\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\nThe core tidyverse includes packages like dplyr (for data manipulation) and ggplot2 (for data visualization).\n\n## Learning Check 🏁 \n\n<div id=\"quiz1\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"What is tidyverse?\",\n      options: [\n        \"A single R package\",\n        \"A collection of R packages for data science\",\n        \"A programming language\",\n        \"A type of data structure\"\n      ]\n    },\n    {\n      text: \"Which of the following is NOT a core tidyverse package?\",\n      options: [\n        \"dplyr\",\n        \"ggplot2\",\n        \"tidyr\",\n        \"base\"\n      ]\n    }\n  ],\n  answers: [1, 3]\n}, \"quiz1\");\n</script>\n\n# Data Manipulation with dplyr 🔄\n\nLet's revisit our deck of cards from the previous chapter, but this time using dplyr functions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the deck\ndeck <- tibble(\n    suit = rep(c(\"Hearts\", \"Diamonds\", \"Clubs\", \"Spades\"), each = 13),\n    rank = rep(c(\"Ace\", 2:10, \"Jack\", \"Queen\", \"King\"), times = 4),\n    value = rep(1:13, times = 4)\n)\n# View the first few cards\ndeck %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  suit   rank  value\n  <chr>  <chr> <int>\n1 Hearts Ace       1\n2 Hearts 2         2\n3 Hearts 3         3\n4 Hearts 4         4\n5 Hearts 5         5\n6 Hearts 6         6\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find all face cards\nface_cards <- deck %>%\n    filter(rank %in% c(\"Jack\", \"Queen\", \"King\"))\n# Calculate average value\navg_value <- deck %>%\n    summarise(mean_value = mean(value))\n# Add color column\ndeck <- deck %>%\n    mutate(color = if_else(suit %in% c(\"Hearts\", \"Diamonds\"), \"Red\", \"Black\"))\n```\n:::\n\n\n\n\n## Hands-On Coding 💻\n\nTry the following:\n\n1. Use `filter()` to find all the Aces in the deck.\n2. Use `arrange()` to sort the deck by suit, then by value.\n3. Use `group_by()` and `summarise()` to find the average value for each suit.\n\n<div id=\"hidden-content1\" style=\"display: none;\">\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find all Aces\naces <- deck %>%\n    filter(rank == \"Ace\")\n# Sort deck\nsorted_deck <- deck %>%\n    arrange(suit, value)\n# Average value by suit\navg_by_suit <- deck %>%\n    group_by(suit) %>%\n    summarise(avg_value = mean(value))\n```\n:::\n\n\n\n\n</div>\n\n<script>\ncreateToggleSection('button1', 'hidden-content1');\n</script>\n\n# Data Visualization with ggplot2 📊\n\nNow, let's visualize our deck using ggplot2:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(deck, aes(x = suit, fill = color)) +\n    geom_bar() +\n    labs(title = \"Distribution of Cards by Suit\",\n    x = \"Suit\",\n    y = \"Count\")+\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## Learning Check 🏁\n\n<div id=\"quiz2\"></div>\n\n<script>\ncreateQuiz({\n  questions: [\n    {\n      text: \"Which function is used to create a new variable in dplyr?\",\n      options: [\n        \"filter()\",\n        \"mutate()\",\n        \"summarise()\",\n        \"arrange()\"\n      ]\n    },\n    {\n      text: \"What does the %>% operator do in tidyverse?\",\n      options: [\n        \"Multiplies values\",\n        \"Pipes the output of one function to the input of another\",\n        \"Creates a new data frame\",\n        \"Filters data\"\n      ]\n    }\n  ],\n  answers: [1, 1]\n}, \"quiz2\");\n</script>\n\n# Building a Simple Slot Machine 🎰\n\nLet's use our tidyverse skills to create a simple virtual slot machine!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n# Define slot machine symbols\nsymbols <- c(\"🍒\", \"🍋\", \"🍊\", \"🍇\", \"🔔\", \"💎\")\n# Function to play the slot machine\nplay_slot_machine <- function(n_plays = 10) {\n    tibble(\n        play = 1:n_plays,\n        symbol1 = sample(symbols, n_plays, replace = TRUE),\n        symbol2 = sample(symbols, n_plays, replace = TRUE),\n        symbol3 = sample(symbols, n_plays, replace = TRUE)\n    ) %>%\n    mutate(\n        win = symbol1 == symbol2 & symbol2 == symbol3,\n        result = if_else(win, \"💰\", \"😢\")\n    )\n}\n# Simulate 20 plays\nresults <- play_slot_machine(20)\n# Display results\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 6\n    play symbol1 symbol2 symbol3 win   result\n   <int> <chr>   <chr>   <chr>   <lgl> <chr> \n 1     1 🍋      🔔      🍇      FALSE 😢    \n 2     2 🍒      🍋      🍊      FALSE 😢    \n 3     3 🍇      🍊      🍊      FALSE 😢    \n 4     4 🍊      🍇      🍊      FALSE 😢    \n 5     5 🔔      🍋      🍒      FALSE 😢    \n 6     6 💎      🔔      🔔      FALSE 😢    \n 7     7 🍇      🍒      🍇      FALSE 😢    \n 8     8 🍊      🔔      💎      FALSE 😢    \n 9     9 🍒      🍒      🍒      TRUE  💰    \n10    10 🍒      🍊      🍇      FALSE 😢    \n11    11 🍇      🍒      💎      FALSE 😢    \n12    12 🍋      🍋      🍒      FALSE 😢    \n13    13 🍇      🍊      🍋      FALSE 😢    \n14    14 🍇      🍒      💎      FALSE 😢    \n15    15 🍒      🍒      🔔      FALSE 😢    \n16    16 💎      🍇      🔔      FALSE 😢    \n17    17 💎      🍊      🍒      FALSE 😢    \n18    18 💎      🍋      🍇      FALSE 😢    \n19    19 🍊      🔔      💎      FALSE 😢    \n20    20 🔔      🍇      🍒      FALSE 😢    \n```\n\n\n:::\n\n```{.r .cell-code}\n# Summarize wins\nsummary <- results %>%\n    summarise(\n    total_plays = n(),\n    wins = sum(win),\n    win_percentage = mean(win)*100\n    )\nprint(summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  total_plays  wins win_percentage\n        <int> <int>          <dbl>\n1          20     1              5\n```\n\n\n:::\n\n```{.r .cell-code}\n#Visualize results\nggplot(results, aes(x = result, fill = result)) +\n    geom_bar() +\n    labs(title = \"Slot Machine Results\", x = \"Outcome\", y = \"Count\") +\n    theme_minimal() +\n    scale_fill_manual(\n        values = c(\"💰\" = \"green\", \"😢\" = \"red\"),\n        labels = c(\"💰\" = \"Win\", \"😢\" = \"Lose\")\n    ) +\n    guides(fill = guide_legend(title = \"Result\"))\n```\n\n::: {.cell-output-display}\n![](05-tidyverse_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nThis simplified slot machine simulation demonstrates several key tidyverse concepts:\n\n1. Using `tibble()` to create a data frame\n2. Utilizing `sample()` for random selection\n3. Employing `mutate()` to add new columns based on conditions\n4. Using `summarise()` to calculate summary statistics\n5. Visualizing results with `ggplot2`\n\n## Hands-On Coding 💻\n\nLet's explore our slot machine simulation with some simple exercises:\n\n1. Count how many times each symbol appears in the first reel (symbol1) after 100 spins.\n\n2. Calculate the percentage of wins in 100 spins.\n\n<div id=\"hidden-content2\" style=\"display: none;\">\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate 100 spins\nset.seed(123) # For reproducibility\nresults <- play_slot_machine(100)\n\n# 1. Count symbols in the first reel\nsymbol_counts <- results %>%\n    count(symbol1, name = \"frequency\") %>%\n    arrange(desc(frequency))\n\nprint(\"Symbol counts in the first reel:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Symbol counts in the first reel:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(symbol_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  symbol1 frequency\n  <chr>       <int>\n1 💎             21\n2 🍒             19\n3 🍊             18\n4 🔔             16\n5 🍋             15\n6 🍇             11\n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. Calculate win percentage\nwin_percentage <- results %>%\n    summarise(win_percent = mean(win)*100) %>%\n    pull(win_percent)\nprint(paste(\"Win percentage:\", round(win_percentage, 2), \"%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Win percentage: 1 %\"\n```\n\n\n:::\n:::\n\n\n\n</div>\n\n# Conclusion\n\nIn this chapter, we've introduced the tidyverse and applied its powerful functions to manipulate and visualize data. We've built on our previous knowledge of dice and cards to create a virtual slot machine, demonstrating how tidyverse can be used for more complex data operations and analysis.\n\nThese skills will be invaluable as you continue your journey in data analysis and visualization with R. In the next chapter, we'll explore more advanced tidyverse functions and apply them to real-world datasets in digital humanities!\n\n<iframe src=\"float_traffic.html\" width=\"200px\" height=\"200px\" style=\"border:none; position: fixed; bottom: 10px; right: 10px; z-index: 9999;\" scrolling=\"no\"></iframe>\n\n\n<iframe src=\"float_dash.html\" width=\"200px\" height=\"200px\" style=\"border:none; position: fixed; bottom: 10px; left: 10px; z-index: 9999;\" scrolling=\"no\"></iframe>",
    "supporting": [
      "05-tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}